<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classNRF24L01" kind="class" language="C++" prot="public">
    <compoundname>NRF24L01</compoundname>
    <includes refid="NRF24L01_8h" local="no">NRF24L01.h</includes>
      <sectiondef kind="user-defined">
      <header>Advanced Operation</header>
      <description><para>Methods you can use to drive the chip in more advanced ways </para></description>
      <memberdef kind="variable" id="classNRF24L01_1a749f38c45c00905b3d8e8c180626bff6" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool NRF24L01::failureDetected</definition>
        <argsstring></argsstring>
        <name>failureDetected</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enable error detection by un-commenting #define FAILURE_HANDLING in RF24_config.h If a failure has been detected, it usually indicates a hardware issue. By default the library will cease operation when a failure is detected. This should allow advanced users to detect and resolve intermittent hardware issues.</para><para>In most cases, the radio must be re-enabled via radio.begin(); and the appropriate settings applied after a failure occurs, if wanting to re-enable the device immediately.</para><para>Usage: (Failure handling must be enabled per above) <programlisting><codeline><highlight class="normal">if(radio.failureDetected){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>radio.begin();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Attempt<sp/>to<sp/>re-configure<sp/>the<sp/>radio<sp/>with<sp/>defaults</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>radio.failureDetected<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Reset<sp/>the<sp/>detection<sp/>value</highlight></codeline>
<codeline><highlight class="normal"><sp/>radio.openWritingPipe(addresses[1]);<sp/>//<sp/>Re-configure<sp/>pipe<sp/>addresses</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>radio.openReadingPipe(1,addresses[0]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>report_failure();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Blink<sp/>leds,<sp/>send<sp/>a<sp/>message,<sp/>etc.<sp/>to<sp/>indicate<sp/>failure</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="659" column="1" bodyfile="src/Wireless/NRF24L01.h" bodystart="659" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1ae5c878a568b54ba045a99b9de377b13b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NRF24L01::printDetails</definition>
        <argsstring>(void)</argsstring>
        <name>printDetails</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print a giant block of debugging information to stdout</para><para><simplesect kind="warning"><para>Does nothing if stdout is not defined. See fdevopen in stdio.h The printf.h file is included with the library for Arduino. <programlisting><codeline><highlight class="normal">#include<sp/>&lt;printf.h&gt;</highlight></codeline>
<codeline><highlight class="normal">setup(){</highlight></codeline>
<codeline><highlight class="normal"><sp/>Serial.begin(115200);</highlight></codeline>
<codeline><highlight class="normal"><sp/>printf_begin();</highlight></codeline>
<codeline><highlight class="normal"><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="310" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1a6bfbb693418e2d60556637b6a3599d05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NRF24L01::available</definition>
        <argsstring>(uint8_t *pipe_num)</argsstring>
        <name>available</name>
        <param>
          <type>uint8_t *</type>
          <declname>pipe_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test whether there are bytes available to be read in the FIFO buffers.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">pipe_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Which pipe has the payload available</para></parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">uint8_t<sp/>pipeNum;</highlight></codeline>
<codeline><highlight class="normal">if(radio.available(&amp;pipeNum)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>radio.read(&amp;data,sizeof(data));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Serial.print(&quot;Got<sp/>data<sp/>on<sp/>pipe&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Serial.println(pipeNum);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <simplesect kind="return"><para>True if there is a payload available, false if none is </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="327" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="1040" bodyend="1053"/>
        <references refid="classNRF24L01_1a6fc7da02296e9f91908e89438ba67901" compoundref="NRF24L01_8cpp" startline="1056" endline="1064">ReadRegister</references>
        <references refid="NRF24L01registers_8h_1ab36696e7fbed789bbe5318e58d3febdf" compoundref="NRF24L01registers_8h" startline="54">NRF24L01_REG_FIFO_STATUS</references>
        <references refid="NRF24L01registers_8h_1a5272c3daa57bbd4cc20162cd19d1c498" compoundref="NRF24L01registers_8h" startline="96">NRF24L01_REG_RX_EMPTY</references>
        <references refid="classNRF24L01_1a95faa729cb8245516e9eb0248c6d9b0f" compoundref="NRF24L01_8cpp" startline="293" endline="297">getStatus</references>
        <references refid="NRF24L01registers_8h_1ab10ea02f6ce265667bf7f6fccf9cff82" compoundref="NRF24L01registers_8h" startline="88">NRF24L01_REG_RX_P_NO</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1aebd4d389685333013b4bd12662c0b411" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NRF24L01::rxFifoFull</definition>
        <argsstring>()</argsstring>
        <name>rxFifoFull</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if the radio needs to be read. Can be used to prevent data loss <simplesect kind="return"><para>True if all three 32-byte radio buffers are full </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="332" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="958" bodyend="960"/>
        <references refid="classNRF24L01_1a6fc7da02296e9f91908e89438ba67901" compoundref="NRF24L01_8cpp" startline="1056" endline="1064">ReadRegister</references>
        <references refid="NRF24L01registers_8h_1ab36696e7fbed789bbe5318e58d3febdf" compoundref="NRF24L01registers_8h" startline="54">NRF24L01_REG_FIFO_STATUS</references>
        <references refid="NRF24L01registers_8h_1ab529137d568b80a496896700304debe1" compoundref="NRF24L01registers_8h" startline="95">NRF24L01_REG_RX_FULL</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1abaf0ed9cb5b24890631d7b8bc0e3cd82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NRF24L01::powerDown</definition>
        <argsstring>(void)</argsstring>
        <name>powerDown</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enter low-power mode</para><para>To return to normal power mode, call <ref refid="classNRF24L01_1a8e184a0a6ca30fbae69c1331a567deda" kindref="member">powerUp()</ref>.</para><para><simplesect kind="note"><para>After calling <ref refid="classNRF24L01_1aaabd39829998b609c0dc317af4f141b2" kindref="member">startListening()</ref>, a basic radio will consume about 13.5mA at max PA level. During active transmission, the radio will consume about 11.5mA, but this will be reduced to 26uA (.026mA) between sending. In full powerDown mode, the radio will consume approximately 900nA (.0009mA)</para></simplesect>
<programlisting><codeline><highlight class="normal">radio.powerDown();</highlight></codeline>
<codeline><highlight class="normal">avr_enter_sleep_mode();<sp/>//<sp/>Custom<sp/>function<sp/>to<sp/>sleep<sp/>the<sp/>device</highlight></codeline>
<codeline><highlight class="normal">radio.powerUp();</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="350" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="267" bodyend="271"/>
        <references refid="classNRF24L01_1aa5e261363986c590c90e7cb2adc2d75d" compoundref="NRF24L01_8h" startline="1004" endline="1004">CE_LOW</references>
        <references refid="classNRF24L01_1abfaaa54aff7ce60c4c844dd540c47af5" compoundref="NRF24L01_8cpp" startline="1081" endline="1088">WriteRegister</references>
        <references refid="NRF24L01registers_8h_1a71b3597b405d855e19ef435a215edacc" compoundref="NRF24L01registers_8h" startline="31">NRF24L01_REG_CONFIG</references>
        <references refid="classNRF24L01_1a6fc7da02296e9f91908e89438ba67901" compoundref="NRF24L01_8cpp" startline="1056" endline="1064">ReadRegister</references>
        <references refid="NRF24L01registers_8h_1a7b36b607ebb925258490887ba7a2878d" compoundref="NRF24L01registers_8h" startline="64">NRF24L01_REG_PWR_UP</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1a8e184a0a6ca30fbae69c1331a567deda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NRF24L01::powerUp</definition>
        <argsstring>(void)</argsstring>
        <name>powerUp</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Leave low-power mode - required for normal radio operation after calling <ref refid="classNRF24L01_1abaf0ed9cb5b24890631d7b8bc0e3cd82" kindref="member">powerDown()</ref></para><para>To return to low power mode, call <ref refid="classNRF24L01_1abaf0ed9cb5b24890631d7b8bc0e3cd82" kindref="member">powerDown()</ref>. <simplesect kind="note"><para>This will take up to 5ms for maximum compatibility </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="357" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="275" bodyend="288"/>
        <references refid="classNRF24L01_1a6fc7da02296e9f91908e89438ba67901" compoundref="NRF24L01_8cpp" startline="1056" endline="1064">ReadRegister</references>
        <references refid="NRF24L01registers_8h_1a71b3597b405d855e19ef435a215edacc" compoundref="NRF24L01registers_8h" startline="31">NRF24L01_REG_CONFIG</references>
        <references refid="NRF24L01registers_8h_1a7b36b607ebb925258490887ba7a2878d" compoundref="NRF24L01registers_8h" startline="64">NRF24L01_REG_PWR_UP</references>
        <references refid="classNRF24L01_1abfaaa54aff7ce60c4c844dd540c47af5" compoundref="NRF24L01_8cpp" startline="1081" endline="1088">WriteRegister</references>
        <references refid="classNRF24L01_1ad311ef5130c99ab8ddca292adfe76603" compoundref="NRF24L01_8h" startline="995" endline="999">delay_ms</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1af59b3fd7aece1ae295a2e634a57d2b02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NRF24L01::write</definition>
        <argsstring>(const void *buf, uint8_t len, const bool multicast)</argsstring>
        <name>write</name>
        <param>
          <type>const void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>multicast</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write for single NOACK writes. Optionally disables acknowledgements/autoretries for a single write.</para><para><simplesect kind="note"><para><ref refid="classNRF24L01_1aeaa968ea74bfd2690fff331e9f115344" kindref="member">enableDynamicAck()</ref> must be called to enable this feature</para></simplesect>
Can be used with <ref refid="classNRF24L01_1ae4067455572c6731211315b3900f5cbd" kindref="member">enableAckPayload()</ref> to request a response <simplesect kind="see"><para><ref refid="classNRF24L01_1aeaa968ea74bfd2690fff331e9f115344" kindref="member">enableDynamicAck()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="classNRF24L01_1a33b1c7dd1cad95dae57ef87bf3dce5c8" kindref="member">setAutoAck()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="classNRF24L01_1a719390c69a2e45df08379f17e3289f4c" kindref="member">write()</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to be sent </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to be sent </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multicast</parametername>
</parameternamelist>
<parameterdescription>
<para>Request ACK (0), NOACK (1) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="372" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="842" bodyend="864"/>
        <references refid="classNRF24L01_1ab1ca9025a8740bc38ad5dd7a427e2d4f" compoundref="NRF24L01_8cpp" startline="934" endline="942">startFastWrite</references>
        <references refid="classNRF24L01_1a95faa729cb8245516e9eb0248c6d9b0f" compoundref="NRF24L01_8cpp" startline="293" endline="297">getStatus</references>
        <references refid="NRF24L01registers_8h_1ace17aac70424ae1d91ac38290a85ae86" compoundref="NRF24L01registers_8h" startline="87">NRF24L01_REG_MAX_RT</references>
        <references refid="NRF24L01registers_8h_1a42b5b404cde7ad0b3917d65caeea9b91" compoundref="NRF24L01registers_8h" startline="86">NRF24L01_REG_TX_DS</references>
        <references refid="classNRF24L01_1aa5e261363986c590c90e7cb2adc2d75d" compoundref="NRF24L01_8h" startline="1004" endline="1004">CE_LOW</references>
        <references refid="classNRF24L01_1abfaaa54aff7ce60c4c844dd540c47af5" compoundref="NRF24L01_8cpp" startline="1081" endline="1088">WriteRegister</references>
        <references refid="NRF24L01registers_8h_1a0eacea6f02e36fcc6045a073b9cf12a0" compoundref="NRF24L01registers_8h" startline="38">NRF24L01_REG_STATUS</references>
        <references refid="NRF24L01registers_8h_1ab600bb73d205bb30ee182bbdd0fe96c0" compoundref="NRF24L01registers_8h" startline="59">NRF24L01_REG_MASK_RX_DR</references>
        <references refid="classNRF24L01_1ab40eeb5ca2337c5f15992f29ee3b5b18" compoundref="NRF24L01_8cpp" startline="1150" endline="1154">FlushTx</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1a693f48de67c8b11ed5860dc481fcfc99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NRF24L01::writeFast</definition>
        <argsstring>(const void *buf, uint8_t len)</argsstring>
        <name>writeFast</name>
        <param>
          <type>const void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This will not block until the 3 FIFO buffers are filled with data. Once the FIFOs are full, writeFast will simply wait for success or timeout, and return 1 or 0 respectively. From a user perspective, just keep trying to send the same data. The library will keep auto retrying the current payload using the built in functionality. <simplesect kind="warning"><para>It is important to never keep the nRF24L01 in TX mode and FIFO full for more than 4ms at a time. If the auto retransmit is enabled, the nRF24L01 is never in TX mode long enough to disobey this rule. Allow the FIFO to clear by issuing <ref refid="classNRF24L01_1a4416a731de8d23cac507e8b69ec2becc" kindref="member">txStandBy()</ref> or ensure appropriate time between transmissions.</para></simplesect>
<programlisting><codeline><highlight class="normal">Example<sp/>(Partial<sp/>blocking):</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radio.writeFast(&amp;buf,32);<sp/><sp/>//<sp/>Writes<sp/>1<sp/>payload<sp/>to<sp/>the<sp/>buffers</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>txStandBy();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Returns<sp/>0<sp/>if<sp/>failed.<sp/>1<sp/>if<sp/>success.<sp/>Blocks<sp/>only<sp/>until<sp/>MAX_RT<sp/>timeout<sp/>or<sp/>success.<sp/>Data<sp/>flushed<sp/>on<sp/>fail.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radio.writeFast(&amp;buf,32);<sp/><sp/>//<sp/>Writes<sp/>1<sp/>payload<sp/>to<sp/>the<sp/>buffers</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>txStandBy(1000);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Using<sp/>extended<sp/>timeouts,<sp/>returns<sp/>1<sp/>if<sp/>success.<sp/>Retries<sp/>failed<sp/>payloads<sp/>for<sp/>1<sp/>seconds<sp/>before<sp/>returning<sp/>0.</highlight></codeline>
</programlisting></para><para><simplesect kind="see"><para><ref refid="classNRF24L01_1a4416a731de8d23cac507e8b69ec2becc" kindref="member">txStandBy()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="classNRF24L01_1a719390c69a2e45df08379f17e3289f4c" kindref="member">write()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="classNRF24L01_1ac2c2500350c3dde0df4f09111f8f1b84" kindref="member">writeBlocking()</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to be sent </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to be sent </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the payload was delivered successfully false if not </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="401" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="926" bodyend="928"/>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1a094a978ed0c7da890c90351bd945fabe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NRF24L01::writeFast</definition>
        <argsstring>(const void *buf, uint8_t len, const bool multicast)</argsstring>
        <name>writeFast</name>
        <param>
          <type>const void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>multicast</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>WriteFast for single NOACK writes. Disables acknowledgements/autoretries for a single write.</para><para><simplesect kind="note"><para><ref refid="classNRF24L01_1aeaa968ea74bfd2690fff331e9f115344" kindref="member">enableDynamicAck()</ref> must be called to enable this feature </para></simplesect>
<simplesect kind="see"><para><ref refid="classNRF24L01_1aeaa968ea74bfd2690fff331e9f115344" kindref="member">enableDynamicAck()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="classNRF24L01_1a33b1c7dd1cad95dae57ef87bf3dce5c8" kindref="member">setAutoAck()</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to be sent </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to be sent </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multicast</parametername>
</parameternamelist>
<parameterdescription>
<para>Request ACK (0) or NOACK (1) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="413" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="905" bodyend="925"/>
        <references refid="classNRF24L01_1a95faa729cb8245516e9eb0248c6d9b0f" compoundref="NRF24L01_8cpp" startline="293" endline="297">getStatus</references>
        <references refid="NRF24L01registers_8h_1a8370cf9c192e94451d3f113e54acc420" compoundref="NRF24L01registers_8h" startline="89">NRF24L01_REG_TX_FULL</references>
        <references refid="NRF24L01registers_8h_1ace17aac70424ae1d91ac38290a85ae86" compoundref="NRF24L01registers_8h" startline="87">NRF24L01_REG_MAX_RT</references>
        <references refid="classNRF24L01_1abfaaa54aff7ce60c4c844dd540c47af5" compoundref="NRF24L01_8cpp" startline="1081" endline="1088">WriteRegister</references>
        <references refid="NRF24L01registers_8h_1a0eacea6f02e36fcc6045a073b9cf12a0" compoundref="NRF24L01registers_8h" startline="38">NRF24L01_REG_STATUS</references>
        <references refid="classNRF24L01_1ab1ca9025a8740bc38ad5dd7a427e2d4f" compoundref="NRF24L01_8cpp" startline="934" endline="942">startFastWrite</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1ac2c2500350c3dde0df4f09111f8f1b84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NRF24L01::writeBlocking</definition>
        <argsstring>(const void *buf, uint8_t len, uint32_t timeout)</argsstring>
        <name>writeBlocking</name>
        <param>
          <type>const void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function extends the auto-retry mechanism to any specified duration. It will not block until the 3 FIFO buffers are filled with data. If so the library will auto retry until a new payload is written or the user specified timeout period is reached. <simplesect kind="warning"><para>It is important to never keep the nRF24L01 in TX mode and FIFO full for more than 4ms at a time. If the auto retransmit is enabled, the nRF24L01 is never in TX mode long enough to disobey this rule. Allow the FIFO to clear by issuing <ref refid="classNRF24L01_1a4416a731de8d23cac507e8b69ec2becc" kindref="member">txStandBy()</ref> or ensure appropriate time between transmissions.</para></simplesect>
<programlisting><codeline><highlight class="normal">Example<sp/>(Full<sp/>blocking):</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radio.writeBlocking(&amp;buf,32,1000);<sp/>//Wait<sp/>up<sp/>to<sp/>1<sp/>second<sp/>to<sp/>write<sp/>1<sp/>payload<sp/>to<sp/>the<sp/>buffers</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>txStandBy(1000);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Wait<sp/>up<sp/>to<sp/>1<sp/>second<sp/>for<sp/>the<sp/>payload<sp/>to<sp/>send.<sp/>Return<sp/>1<sp/>if<sp/>ok,<sp/>0<sp/>if<sp/>failed.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Blocks<sp/>only<sp/>until<sp/>user<sp/>timeout<sp/>or<sp/>success.<sp/>Data<sp/>flushed<sp/>on<sp/>fail.</highlight></codeline>
</programlisting> <simplesect kind="note"><para>If used from within an interrupt, the interrupt should be disabled until completion, and sei(); called to enable millis(). </para></simplesect>
<simplesect kind="see"><para><ref refid="classNRF24L01_1a4416a731de8d23cac507e8b69ec2becc" kindref="member">txStandBy()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="classNRF24L01_1a719390c69a2e45df08379f17e3289f4c" kindref="member">write()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="classNRF24L01_1a693f48de67c8b11ed5860dc481fcfc99" kindref="member">writeFast()</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to be sent </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to be sent </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>User defined timeout in milliseconds. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the payload was loaded into the buffer successfully false if not </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="440" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="872" bodyend="894"/>
        <references refid="classNRF24L01_1a95faa729cb8245516e9eb0248c6d9b0f" compoundref="NRF24L01_8cpp" startline="293" endline="297">getStatus</references>
        <references refid="NRF24L01registers_8h_1a8370cf9c192e94451d3f113e54acc420" compoundref="NRF24L01registers_8h" startline="89">NRF24L01_REG_TX_FULL</references>
        <references refid="NRF24L01registers_8h_1ace17aac70424ae1d91ac38290a85ae86" compoundref="NRF24L01registers_8h" startline="87">NRF24L01_REG_MAX_RT</references>
        <references refid="classNRF24L01_1ad0797d9c6f8ecd9619c9e48168571a01" compoundref="NRF24L01_8cpp" startline="897" endline="902">reUseTX</references>
        <references refid="classNRF24L01_1ab1ca9025a8740bc38ad5dd7a427e2d4f" compoundref="NRF24L01_8cpp" startline="934" endline="942">startFastWrite</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1a4416a731de8d23cac507e8b69ec2becc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NRF24L01::txStandBy</definition>
        <argsstring>()</argsstring>
        <name>txStandBy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function should be called as soon as transmission is finished to drop the radio back to STANDBY-I mode. If not issued, the radio will remain in STANDBY-II mode which, per the data sheet, is not a recommended operating mode.</para><para><simplesect kind="note"><para>When transmitting data in rapid succession, it is still recommended by the manufacturer to drop the radio out of TX or STANDBY-II mode if there is time enough between sends for the FIFOs to empty. This is not required if auto-ack is enabled.</para></simplesect>
Relies on built-in auto retry functionality.</para><para><programlisting><codeline><highlight class="normal">Example<sp/>(Partial<sp/>blocking):</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radio.writeFast(&amp;buf,32);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radio.writeFast(&amp;buf,32);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radio.writeFast(&amp;buf,32);<sp/><sp/>//Fills<sp/>the<sp/>FIFO<sp/>buffers<sp/>up</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>ok<sp/>=<sp/>txStandBy();<sp/><sp/><sp/><sp/><sp/>//Returns<sp/>0<sp/>if<sp/>failed.<sp/>1<sp/>if<sp/>success.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Blocks<sp/>only<sp/>until<sp/>MAX_RT<sp/>timeout<sp/>or<sp/>success.<sp/>Data<sp/>flushed<sp/>on<sp/>fail.</highlight></codeline>
</programlisting> <simplesect kind="see"><para>txStandBy(unsigned long timeout) </para></simplesect>
<simplesect kind="return"><para>True if transmission is successful </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="467" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="963" bodyend="978"/>
        <references refid="classNRF24L01_1a6fc7da02296e9f91908e89438ba67901" compoundref="NRF24L01_8cpp" startline="1056" endline="1064">ReadRegister</references>
        <references refid="NRF24L01registers_8h_1ab36696e7fbed789bbe5318e58d3febdf" compoundref="NRF24L01registers_8h" startline="54">NRF24L01_REG_FIFO_STATUS</references>
        <references refid="NRF24L01registers_8h_1a60d624106d23fd98a17c953ba91c2979" compoundref="NRF24L01registers_8h" startline="94">NRF24L01_REG_TX_EMPTY</references>
        <references refid="classNRF24L01_1a95faa729cb8245516e9eb0248c6d9b0f" compoundref="NRF24L01_8cpp" startline="293" endline="297">getStatus</references>
        <references refid="NRF24L01registers_8h_1ace17aac70424ae1d91ac38290a85ae86" compoundref="NRF24L01registers_8h" startline="87">NRF24L01_REG_MAX_RT</references>
        <references refid="classNRF24L01_1abfaaa54aff7ce60c4c844dd540c47af5" compoundref="NRF24L01_8cpp" startline="1081" endline="1088">WriteRegister</references>
        <references refid="NRF24L01registers_8h_1a0eacea6f02e36fcc6045a073b9cf12a0" compoundref="NRF24L01registers_8h" startline="38">NRF24L01_REG_STATUS</references>
        <references refid="classNRF24L01_1aa5e261363986c590c90e7cb2adc2d75d" compoundref="NRF24L01_8h" startline="1004" endline="1004">CE_LOW</references>
        <references refid="classNRF24L01_1ab40eeb5ca2337c5f15992f29ee3b5b18" compoundref="NRF24L01_8cpp" startline="1150" endline="1154">FlushTx</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1a9351f4bff2196c4f69623f636de7c6a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NRF24L01::txStandBy</definition>
        <argsstring>(uint32_t timeout, bool startTx=0)</argsstring>
        <name>txStandBy</name>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>startTx</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function allows extended blocking and auto-retries per a user defined timeout <programlisting><codeline><highlight class="normal">Fully<sp/>Blocking<sp/>Example:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>radio.writeFast(&amp;buf,32);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>radio.writeFast(&amp;buf,32);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>radio.writeFast(&amp;buf,32);<sp/><sp/><sp/>//Fills<sp/>the<sp/>FIFO<sp/>buffers<sp/>up</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>bool<sp/>ok<sp/>=<sp/>txStandBy(1000);<sp/><sp/>//Returns<sp/>0<sp/>if<sp/>failed<sp/>after<sp/>1<sp/>second<sp/>of<sp/>retries.<sp/>1<sp/>if<sp/>success.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Blocks<sp/>only<sp/>until<sp/>user<sp/>defined<sp/>timeout<sp/>or<sp/>success.<sp/>Data<sp/>flushed<sp/>on<sp/>fail.</highlight></codeline>
</programlisting> <simplesect kind="note"><para>If used from within an interrupt, the interrupt should be disabled until completion, and sei(); called to enable millis(). </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of milliseconds to retry failed payloads </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if transmission is successful </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="484" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1ae0f4b84a244463e8e594d238a71140c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NRF24L01::writeAckPayload</definition>
        <argsstring>(uint8_t pipe, const void *buf, uint8_t len)</argsstring>
        <name>writeAckPayload</name>
        <param>
          <type>uint8_t</type>
          <declname>pipe</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write an ack payload for the specified pipe</para><para>The next time a message is received on <computeroutput>pipe</computeroutput>, the data in <computeroutput>buf</computeroutput> will be sent back in the acknowledgement. <simplesect kind="see"><para><ref refid="classNRF24L01_1ae4067455572c6731211315b3900f5cbd" kindref="member">enableAckPayload()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="classNRF24L01_1abd060c4df7efac781ed5812a0ee19d08" kindref="member">enableDynamicPayloads()</ref> </para></simplesect>
<simplesect kind="warning"><para>Only three of these can be pending at any time as there are only 3 FIFO buffers.<linebreak/>
 Dynamic payloads must be enabled. </para></simplesect>
<simplesect kind="note"><para>Ack payloads are handled automatically by the radio chip when a payload is received. Users should generally write an ack payload as soon as <ref refid="classNRF24L01_1aaabd39829998b609c0dc317af4f141b2" kindref="member">startListening()</ref> is called, so one is available when a regular payload is received. </para></simplesect>
<simplesect kind="note"><para>Ack payloads are dynamic payloads. This only works on pipes 0&amp;1 by default. Call <ref refid="classNRF24L01_1abd060c4df7efac781ed5812a0ee19d08" kindref="member">enableDynamicPayloads()</ref> to enable on all pipes.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pipe</parametername>
</parameternamelist>
<parameterdescription>
<para>Which pipe# (typically 1-5) will get this response. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data that is sent </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the data to send, up to 32 bytes max. Not affected by the static payload set by <ref refid="classNRF24L01_1abe5983a57d0d3bd77508e5345774c890" kindref="member">setPayloadSize()</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="503" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="666" bodyend="679"/>
        <references refid="NRF24L01_8h_1a803c01bff6ebb264fb8b4438eb65f098" compoundref="NRF24L01_8h" startline="60">rf24_min</references>
        <references refid="classNRF24L01_1acffaad2c6b5e3713f7fe6af22d4553ef" compoundref="NRF24L01_8h" startline="1002" endline="1002">CSN_LOW</references>
        <references refid="classNRF24L01_1a6321af25fee367445baa6ab4840f8443" compoundref="NRF24L01_8h" startline="989">spi</references>
        <references refid="classSPI_1ad2c97b15ee0417c355a899c28d2efa5d" compoundref="SPI_8cpp" startline="79" endline="83">SPI::WriteReadbyte</references>
        <references refid="NRF24L01registers_8h_1a1228e0839416abda8055b212b2905ced" compoundref="NRF24L01registers_8h" startline="120">NRF24L01_CMD_W_ACK_PAYLOAD</references>
        <references refid="classNRF24L01_1a958fa3e8a0457c0c655b9652ee9dbad4" compoundref="NRF24L01_8h" startline="1001" endline="1001">CSN_HIGH</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1a99aae87d62d5097447305d66a0b3281d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NRF24L01::isAckPayloadAvailable</definition>
        <argsstring>(void)</argsstring>
        <name>isAckPayloadAvailable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine if an ack payload was received in the most recent call to <ref refid="classNRF24L01_1a719390c69a2e45df08379f17e3289f4c" kindref="member">write()</ref>. The regular <ref refid="classNRF24L01_1ab368039cf5448f0ff5d489563d530c7b" kindref="member">available()</ref> can also be used.</para><para>Call <ref refid="classNRF24L01_1a60ed6c6e072a1f41ca560546745ec6da" kindref="member">read()</ref> to retrieve the ack payload.</para><para><simplesect kind="return"><para>True if an ack payload is available. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="512" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="681" bodyend="683"/>
        <references refid="classNRF24L01_1a6fc7da02296e9f91908e89438ba67901" compoundref="NRF24L01_8cpp" startline="1056" endline="1064">ReadRegister</references>
        <references refid="NRF24L01registers_8h_1ab36696e7fbed789bbe5318e58d3febdf" compoundref="NRF24L01registers_8h" startline="54">NRF24L01_REG_FIFO_STATUS</references>
        <references refid="NRF24L01registers_8h_1a5272c3daa57bbd4cc20162cd19d1c498" compoundref="NRF24L01registers_8h" startline="96">NRF24L01_REG_RX_EMPTY</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1ad98d10f3759d41e565397aba824d121b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NRF24L01::whatHappened</definition>
        <argsstring>(bool &amp;tx_ok, bool &amp;tx_fail, bool &amp;rx_ready)</argsstring>
        <name>whatHappened</name>
        <param>
          <type>bool &amp;</type>
          <declname>tx_ok</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>tx_fail</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>rx_ready</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Call this when you get an interrupt to find out why</para><para>Tells you what caused the interrupt, and clears the state of interrupts.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">tx_ok</parametername>
</parameternamelist>
<parameterdescription>
<para>The send was successful (TX_DS) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">tx_fail</parametername>
</parameternamelist>
<parameterdescription>
<para>The send failed, too many retries (MAX_RT) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">rx_ready</parametername>
</parameternamelist>
<parameterdescription>
<para>There is a message waiting to be read (RX_DS) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="524" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="491" bodyend="500"/>
        <references refid="classNRF24L01_1abfaaa54aff7ce60c4c844dd540c47af5" compoundref="NRF24L01_8cpp" startline="1081" endline="1088">WriteRegister</references>
        <references refid="NRF24L01registers_8h_1a0eacea6f02e36fcc6045a073b9cf12a0" compoundref="NRF24L01registers_8h" startline="38">NRF24L01_REG_STATUS</references>
        <references refid="NRF24L01registers_8h_1acb501a3032174ca687b876d73858bed1" compoundref="NRF24L01registers_8h" startline="85">NRF24L01_REG_RX_DR</references>
        <references refid="NRF24L01registers_8h_1a42b5b404cde7ad0b3917d65caeea9b91" compoundref="NRF24L01registers_8h" startline="86">NRF24L01_REG_TX_DS</references>
        <references refid="NRF24L01registers_8h_1ace17aac70424ae1d91ac38290a85ae86" compoundref="NRF24L01registers_8h" startline="87">NRF24L01_REG_MAX_RT</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1ab1ca9025a8740bc38ad5dd7a427e2d4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NRF24L01::startFastWrite</definition>
        <argsstring>(const void *buf, uint8_t len, const bool multicast, bool startTx=1)</argsstring>
        <name>startFastWrite</name>
        <param>
          <type>const void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>multicast</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>startTx</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Non-blocking write to the open writing pipe used for buffered writes</para><para><simplesect kind="note"><para>Optimization: This function now leaves the CE pin high, so the radio will remain in TX or STANDBY-II Mode until a <ref refid="classNRF24L01_1a4416a731de8d23cac507e8b69ec2becc" kindref="member">txStandBy()</ref> command is issued. Can be used as an alternative to <ref refid="classNRF24L01_1a282e44fa8d6ec7542e9d725cf048f6b2" kindref="member">startWrite()</ref> if writing multiple payloads at once. </para></simplesect>
<simplesect kind="warning"><para>It is important to never keep the nRF24L01 in TX mode with FIFO full for more than 4ms at a time. If the auto retransmit/autoAck is enabled, the nRF24L01 is never in TX mode long enough to disobey this rule. Allow the FIFO to clear by issuing <ref refid="classNRF24L01_1a4416a731de8d23cac507e8b69ec2becc" kindref="member">txStandBy()</ref> or ensure appropriate time between transmissions.</para></simplesect>
<simplesect kind="see"><para><ref refid="classNRF24L01_1a719390c69a2e45df08379f17e3289f4c" kindref="member">write()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="classNRF24L01_1a693f48de67c8b11ed5860dc481fcfc99" kindref="member">writeFast()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="classNRF24L01_1a282e44fa8d6ec7542e9d725cf048f6b2" kindref="member">startWrite()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="classNRF24L01_1ac2c2500350c3dde0df4f09111f8f1b84" kindref="member">writeBlocking()</ref></para></simplesect>
For single noAck writes see: <simplesect kind="see"><para><ref refid="classNRF24L01_1aeaa968ea74bfd2690fff331e9f115344" kindref="member">enableDynamicAck()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="classNRF24L01_1a33b1c7dd1cad95dae57ef87bf3dce5c8" kindref="member">setAutoAck()</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to be sent </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to be sent </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multicast</parametername>
</parameternamelist>
<parameterdescription>
<para>Request ACK (0) or NOACK (1) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the payload was delivered successfully false if not </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="549" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="934" bodyend="942"/>
        <references refid="classNRF24L01_1a9abae657dc54d97b6eb63f33c83e9f59" compoundref="NRF24L01_8cpp" startline="1103" endline="1121">WritePayload</references>
        <references refid="NRF24L01registers_8h_1a179cd9f4f11471fe0b12a78116303cd6" compoundref="NRF24L01registers_8h" startline="127">NRF24L01_CMD_W_TX_PAYLOAD_NO_ACK</references>
        <references refid="NRF24L01registers_8h_1a39d8f4753c730f1f89a815632afc68cb" compoundref="NRF24L01registers_8h" startline="119">NRF24L01_CMD_W_TX_PAYLOAD</references>
        <references refid="classNRF24L01_1a85274c10cbe6317796a209913bfb0253" compoundref="NRF24L01_8h" startline="1003" endline="1003">CE_HIGH</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1a282e44fa8d6ec7542e9d725cf048f6b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NRF24L01::startWrite</definition>
        <argsstring>(const void *buf, uint8_t len, const bool multicast)</argsstring>
        <name>startWrite</name>
        <param>
          <type>const void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>multicast</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Non-blocking write to the open writing pipe</para><para>Just like <ref refid="classNRF24L01_1a719390c69a2e45df08379f17e3289f4c" kindref="member">write()</ref>, but it returns immediately. To find out what happened to the send, catch the IRQ and then call <ref refid="classNRF24L01_1ad98d10f3759d41e565397aba824d121b" kindref="member">whatHappened()</ref>.</para><para><simplesect kind="see"><para><ref refid="classNRF24L01_1a719390c69a2e45df08379f17e3289f4c" kindref="member">write()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="classNRF24L01_1a693f48de67c8b11ed5860dc481fcfc99" kindref="member">writeFast()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="classNRF24L01_1ab1ca9025a8740bc38ad5dd7a427e2d4f" kindref="member">startFastWrite()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="classNRF24L01_1ad98d10f3759d41e565397aba824d121b" kindref="member">whatHappened()</ref></para></simplesect>
For single noAck writes see: <simplesect kind="see"><para><ref refid="classNRF24L01_1aeaa968ea74bfd2690fff331e9f115344" kindref="member">enableDynamicAck()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="classNRF24L01_1a33b1c7dd1cad95dae57ef87bf3dce5c8" kindref="member">setAutoAck()</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to be sent </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to be sent </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multicast</parametername>
</parameternamelist>
<parameterdescription>
<para>Request ACK (0) or NOACK (1) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="570" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="946" bodyend="955"/>
        <references refid="classNRF24L01_1a9abae657dc54d97b6eb63f33c83e9f59" compoundref="NRF24L01_8cpp" startline="1103" endline="1121">WritePayload</references>
        <references refid="NRF24L01registers_8h_1a179cd9f4f11471fe0b12a78116303cd6" compoundref="NRF24L01registers_8h" startline="127">NRF24L01_CMD_W_TX_PAYLOAD_NO_ACK</references>
        <references refid="NRF24L01registers_8h_1a39d8f4753c730f1f89a815632afc68cb" compoundref="NRF24L01registers_8h" startline="119">NRF24L01_CMD_W_TX_PAYLOAD</references>
        <references refid="classNRF24L01_1a85274c10cbe6317796a209913bfb0253" compoundref="NRF24L01_8h" startline="1003" endline="1003">CE_HIGH</references>
        <references refid="classNRF24L01_1aa5e261363986c590c90e7cb2adc2d75d" compoundref="NRF24L01_8h" startline="1004" endline="1004">CE_LOW</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1ad0797d9c6f8ecd9619c9e48168571a01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NRF24L01::reUseTX</definition>
        <argsstring>()</argsstring>
        <name>reUseTX</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is mainly used internally to take advantage of the auto payload re-use functionality of the chip, but can be beneficial to users as well.</para><para>The function will instruct the radio to re-use the data in the FIFO buffers, and instructs the radio to re-send once the timeout limit has been reached. Used by writeFast and writeBlocking to initiate retries when a TX failure occurs. Retries are automatically initiated except with the standard <ref refid="classNRF24L01_1a719390c69a2e45df08379f17e3289f4c" kindref="member">write()</ref>. This way, data is not flushed from the buffer until switching between modes.</para><para><simplesect kind="note"><para>This is to be used AFTER auto-retry fails if wanting to resend using the built-in payload reuse features. After issuing <ref refid="classNRF24L01_1ad0797d9c6f8ecd9619c9e48168571a01" kindref="member">reUseTX()</ref>, it will keep reending the same payload forever or until a payload is written to the FIFO, or a flush_tx command is given. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="586" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="897" bodyend="902"/>
        <references refid="classNRF24L01_1abfaaa54aff7ce60c4c844dd540c47af5" compoundref="NRF24L01_8cpp" startline="1081" endline="1088">WriteRegister</references>
        <references refid="NRF24L01registers_8h_1a0eacea6f02e36fcc6045a073b9cf12a0" compoundref="NRF24L01registers_8h" startline="38">NRF24L01_REG_STATUS</references>
        <references refid="NRF24L01registers_8h_1ace17aac70424ae1d91ac38290a85ae86" compoundref="NRF24L01registers_8h" startline="87">NRF24L01_REG_MAX_RT</references>
        <references refid="classNRF24L01_1ab604b1e177e4812e33ebc39287503197" compoundref="NRF24L01_8cpp" startline="1157" endline="1166">spiTrans</references>
        <references refid="NRF24L01registers_8h_1ac0684d6c09cc47538eedbeb1babbd72c" compoundref="NRF24L01registers_8h" startline="123">NRF24L01_CMD_REUSE_TX_PL</references>
        <references refid="classNRF24L01_1aa5e261363986c590c90e7cb2adc2d75d" compoundref="NRF24L01_8h" startline="1004" endline="1004">CE_LOW</references>
        <references refid="classNRF24L01_1a85274c10cbe6317796a209913bfb0253" compoundref="NRF24L01_8h" startline="1003" endline="1003">CE_HIGH</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1ab40eeb5ca2337c5f15992f29ee3b5b18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t NRF24L01::FlushTx</definition>
        <argsstring>(void)</argsstring>
        <name>FlushTx</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Empty the transmit buffer. This is generally not required in standard operation. May be required in specific cases after <ref refid="classNRF24L01_1a6ad13189b732f237ac148c659ddf6b01" kindref="member">stopListening()</ref> , if operating at 250KBPS data rate.</para><para><simplesect kind="return"><para>Current value of status register </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="594" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="1150" bodyend="1154"/>
        <references refid="classNRF24L01_1ab604b1e177e4812e33ebc39287503197" compoundref="NRF24L01_8cpp" startline="1157" endline="1166">spiTrans</references>
        <references refid="NRF24L01registers_8h_1aa53de4fc4d2681362196d5e5ffbfc533" compoundref="NRF24L01registers_8h" startline="121">NRF24L01_CMD_FLUSH_TX</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1a5e934f8f7d37245264ad16e3c360eca7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NRF24L01::testCarrier</definition>
        <argsstring>(void)</argsstring>
        <name>testCarrier</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test whether there was a carrier on the line for the previous listening period.</para><para>Useful to check for interference on the current channel.</para><para><simplesect kind="return"><para>true if was carrier, false if not </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="603" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="718" bodyend="720"/>
        <references refid="classNRF24L01_1a6fc7da02296e9f91908e89438ba67901" compoundref="NRF24L01_8cpp" startline="1056" endline="1064">ReadRegister</references>
        <references refid="NRF24L01registers_8h_1adf6e4361fe63bf668a1ade00a686739b" compoundref="NRF24L01registers_8h" startline="40">NRF24L01_REG_CD</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1abf1d84ed988aa6c7925ebb712b7c7f60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NRF24L01::testRPD</definition>
        <argsstring>(void)</argsstring>
        <name>testRPD</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test whether a signal (carrier or otherwise) greater than or equal to -64dBm is present on the channel. Valid only on nRF24L01P (+) hardware. On nRF24L01, use <ref refid="classNRF24L01_1a5e934f8f7d37245264ad16e3c360eca7" kindref="member">testCarrier()</ref>.</para><para>Useful to check for interference on the current channel and channel hopping strategies.</para><para><programlisting><codeline><highlight class="normal">bool<sp/>goodSignal<sp/>=<sp/>radio.testRPD();</highlight></codeline>
<codeline><highlight class="normal">if(radio.available()){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Serial.println(goodSignal<sp/>?<sp/>&quot;Strong<sp/>signal<sp/>&gt;<sp/>64dBm&quot;<sp/>:<sp/>&quot;Weak<sp/>signal<sp/>&lt;<sp/>64dBm&quot;<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>radio.read(0,0);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <simplesect kind="return"><para>true if signal =&gt; -64dBm, false if not </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="622" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="722" bodyend="724"/>
        <references refid="classNRF24L01_1a6fc7da02296e9f91908e89438ba67901" compoundref="NRF24L01_8cpp" startline="1056" endline="1064">ReadRegister</references>
        <references refid="NRF24L01registers_8h_1ab9743a9a0928c8f19ad9687ae6c67150" compoundref="NRF24L01registers_8h" startline="126">RPD</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1aaddabe35ed60f03a2fb2fb475a3cafb5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool NRF24L01::isValid</definition>
        <argsstring>()</argsstring>
        <name>isValid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test whether this is a real radio, or a mock shim for debugging. Setting either pin to 0xff is the way to indicate that this is not a real radio.</para><para><simplesect kind="return"><para>true if this is a legitimate radio </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="630" column="1" bodyfile="src/Wireless/NRF24L01.h" bodystart="630" bodyend="630"/>
        <references refid="classNRF24L01_1a7214eaa3fcd3b6576d8f290e6ab71955" compoundref="NRF24L01_8cpp" startline="599" endline="601">closeReadingPipe</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1a7214eaa3fcd3b6576d8f290e6ab71955" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NRF24L01::closeReadingPipe</definition>
        <argsstring>(uint8_t pipe)</argsstring>
        <name>closeReadingPipe</name>
        <param>
          <type>uint8_t</type>
          <declname>pipe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Close a pipe after it has been previously opened. Can be safely called without having previously opened a pipe. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pipe</parametername>
</parameternamelist>
<parameterdescription>
<para>Which pipe # to close, 0-5. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="637" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="599" bodyend="601"/>
        <references refid="classNRF24L01_1abfaaa54aff7ce60c4c844dd540c47af5" compoundref="NRF24L01_8cpp" startline="1081" endline="1088">WriteRegister</references>
        <references refid="NRF24L01registers_8h_1a1ece6e2d8eda4cbda7576562213fe72a" compoundref="NRF24L01registers_8h" startline="33">NRF24L01_REG_EN_RXADDR</references>
        <references refid="classNRF24L01_1a6fc7da02296e9f91908e89438ba67901" compoundref="NRF24L01_8cpp" startline="1056" endline="1064">ReadRegister</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Optional Configurators</header>
      <description><para>Methods you can use to get or set the configuration of the chip. None are required. Calling begin() sets up a reasonable set of defaults. </para></description>
      <memberdef kind="variable" id="classNRF24L01_1a1feaab910ecff17805f8141fe40028e7" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t NRF24L01::txDelay</definition>
        <argsstring></argsstring>
        <name>txDelay</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The driver will delay for this duration when <ref refid="classNRF24L01_1a6ad13189b732f237ac148c659ddf6b01" kindref="member">stopListening()</ref> is called</para><para>When responding to payloads, faster devices like ARM(RPi) are much faster than Arduino:<orderedlist>
<listitem><para>Arduino sends data to RPi, switches to RX mode</para></listitem><listitem><para>The RPi receives the data, switches to TX mode and sends before the Arduino radio is in RX mode</para></listitem><listitem><para>If AutoACK is disabled, this can be set as low as 0. If AA/ESB enabled, set to 100uS minimum on RPi</para></listitem></orderedlist>
</para><para><simplesect kind="warning"><para>If set to 0, ensure 130uS delay after <ref refid="classNRF24L01_1a6ad13189b732f237ac148c659ddf6b01" kindref="member">stopListening()</ref> and before any sends </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="905" column="1" bodyfile="src/Wireless/NRF24L01.h" bodystart="905" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNRF24L01_1abae8b8afbf747344006d6163c607be00" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t NRF24L01::csDelay</definition>
        <argsstring></argsstring>
        <name>csDelay</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>On all devices but Linux and ATTiny, a small delay is added to the CSN toggling function</para><para>This is intended to minimise the speed of <ref refid="classSPI" kindref="compound">SPI</ref> polling due to radio commands</para><para>If using interrupts or timed requests, this can be set to 0 Default:5 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="916" column="1" bodyfile="src/Wireless/NRF24L01.h" bodystart="916" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNRF24L01_1a6321af25fee367445baa6ab4840f8443" prot="public" static="no" mutable="no">
        <type><ref refid="classSPI" kindref="compound">SPI</ref></type>
        <definition>SPI NRF24L01::spi</definition>
        <argsstring></argsstring>
        <name>spi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="989" column="1" bodyfile="src/Wireless/NRF24L01.h" bodystart="989" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1a17752733515f67aa9f6ed3daa1ed3d1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NRF24L01::setAddressWidth</definition>
        <argsstring>(uint8_t a_width)</argsstring>
        <name>setAddressWidth</name>
        <param>
          <type>uint8_t</type>
          <declname>a_width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the address width from 3 to 5 bytes (24, 32 or 40 bit)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a_width</parametername>
</parameternamelist>
<parameterdescription>
<para>The address width to use: 3,4 or 5 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="678" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="540" bodyend="550"/>
        <references refid="classNRF24L01_1abfaaa54aff7ce60c4c844dd540c47af5" compoundref="NRF24L01_8cpp" startline="1081" endline="1088">WriteRegister</references>
        <references refid="NRF24L01registers_8h_1abbc6247e7eda358785fef00dd10c64fa" compoundref="NRF24L01registers_8h" startline="34">NRF24L01_REG_SETUP_AW</references>
        <references refid="classNRF24L01_1a0b5c60487c6b715b9f17f968f7958d93" compoundref="NRF24L01_8h" startline="123">NRF24L01_ADDRSIZE</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1a0bb209d94b62e2a28af53179af713f3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NRF24L01::setRetries</definition>
        <argsstring>(uint8_t delay, uint8_t count)</argsstring>
        <name>setRetries</name>
        <param>
          <type>uint8_t</type>
          <declname>delay</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the number and delay of retries upon failed submit</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>delay</parametername>
</parameternamelist>
<parameterdescription>
<para>How long to wait between each retry, in multiples of 250us, max is 15. 0 means 250us, 15 means 4000us. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>How many retries before giving up, max 15 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="686" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="836" bodyend="838"/>
        <references refid="classNRF24L01_1abfaaa54aff7ce60c4c844dd540c47af5" compoundref="NRF24L01_8cpp" startline="1081" endline="1088">WriteRegister</references>
        <references refid="NRF24L01registers_8h_1aadb3a51873ffb766f031c69e42a1915e" compoundref="NRF24L01registers_8h" startline="35">NRF24L01_REG_SETUP_RETR</references>
        <references refid="NRF24L01registers_8h_1a9a7f8857555bf77be7617738518c9daa" compoundref="NRF24L01registers_8h" startline="79">NRF24L01_REG_ARD</references>
        <references refid="NRF24L01registers_8h_1a881d6bbc61497264fad5e0209c4b1616" compoundref="NRF24L01registers_8h" startline="80">NRF24L01_REG_ARC</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1aa8eaf9d5ed604f60a00cd79fed9edad7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NRF24L01::setChannel</definition>
        <argsstring>(uint8_t channel)</argsstring>
        <name>setChannel</name>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set RF communication channel</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Which RF channel to communicate on, 0-125 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="693" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="299" bodyend="303"/>
        <references refid="classNRF24L01_1abfaaa54aff7ce60c4c844dd540c47af5" compoundref="NRF24L01_8cpp" startline="1081" endline="1088">WriteRegister</references>
        <references refid="NRF24L01registers_8h_1ad26afb4999172e98101026d993b96a4e" compoundref="NRF24L01registers_8h" startline="36">NRF24L01_REG_RF_CH</references>
        <references refid="NRF24L01_8h_1a803c01bff6ebb264fb8b4438eb65f098" compoundref="NRF24L01_8h" startline="60">rf24_min</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1a6b269b519d57d54d0682a29ce9036b12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t NRF24L01::getChannel</definition>
        <argsstring>(void)</argsstring>
        <name>getChannel</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get RF communication channel</para><para><simplesect kind="return"><para>The currently configured RF Channel </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="699" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="304" bodyend="306"/>
        <references refid="classNRF24L01_1a6fc7da02296e9f91908e89438ba67901" compoundref="NRF24L01_8cpp" startline="1056" endline="1064">ReadRegister</references>
        <references refid="NRF24L01registers_8h_1ad26afb4999172e98101026d993b96a4e" compoundref="NRF24L01registers_8h" startline="36">NRF24L01_REG_RF_CH</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1abe5983a57d0d3bd77508e5345774c890" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NRF24L01::setPayloadSize</definition>
        <argsstring>(uint8_t size)</argsstring>
        <name>setPayloadSize</name>
        <param>
          <type>uint8_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set Static Payload Size</para><para>This implementation uses a pre-stablished fixed payload size for all transmissions. If this method is never called, the driver will always transmit the maximum payload size (32 bytes), no matter how much was sent to <ref refid="classNRF24L01_1a719390c69a2e45df08379f17e3289f4c" kindref="member">write()</ref>.</para><para><xrefsect id="todo_1_todo000002"><xreftitle>Todo</xreftitle><xrefdescription><para>Implement variable-sized payloads feature</para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes in the payload </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="713" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="309" bodyend="311"/>
        <references refid="classNRF24L01_1a6f035e7c49d8ed5e1ab84242cef0e9be" compoundref="NRF24L01_8h" startline="109">NRF24L01_PAYLOAD</references>
        <references refid="NRF24L01_8h_1a803c01bff6ebb264fb8b4438eb65f098" compoundref="NRF24L01_8h" startline="60">rf24_min</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1a4a7f48ca92e14baabd8be1c0831e8c2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t NRF24L01::getPayloadSize</definition>
        <argsstring>(void)</argsstring>
        <name>getPayloadSize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get Static Payload Size</para><para><simplesect kind="see"><para><ref refid="classNRF24L01_1abe5983a57d0d3bd77508e5345774c890" kindref="member">setPayloadSize()</ref></para></simplesect>
<simplesect kind="return"><para>The number of bytes in the payload </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="721" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="313" bodyend="315"/>
        <references refid="classNRF24L01_1a6f035e7c49d8ed5e1ab84242cef0e9be" compoundref="NRF24L01_8h" startline="109">NRF24L01_PAYLOAD</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1a0d0cd5dd09d60e06280f378166725d64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t NRF24L01::getDynamicPayloadSize</definition>
        <argsstring>(void)</argsstring>
        <name>getDynamicPayloadSize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get Dynamic Payload Size</para><para>For dynamic payloads, this pulls the size of the payload off the chip</para><para><simplesect kind="note"><para>Corrupt packets are now detected and flushed per the manufacturer. <programlisting><codeline><highlight class="normal">if(radio.available()){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if(radio.getDynamicPayloadSize()<sp/>&lt;<sp/>1){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Corrupt<sp/>payload<sp/>has<sp/>been<sp/>flushed</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>radio.read(&amp;data,sizeof(data));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para></simplesect>
<simplesect kind="return"><para>Payload length of last-received dynamic payload </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="743" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="1020" bodyend="1032"/>
        <references refid="classNRF24L01_1acffaad2c6b5e3713f7fe6af22d4553ef" compoundref="NRF24L01_8h" startline="1002" endline="1002">CSN_LOW</references>
        <references refid="classNRF24L01_1a6321af25fee367445baa6ab4840f8443" compoundref="NRF24L01_8h" startline="989">spi</references>
        <references refid="classSPI_1ad2c97b15ee0417c355a899c28d2efa5d" compoundref="SPI_8cpp" startline="79" endline="83">SPI::WriteReadbyte</references>
        <references refid="NRF24L01registers_8h_1a757b26d356c18ce1bf36777d0cd196a3" compoundref="NRF24L01registers_8h" startline="117">NRF24L01_CMD_R_RX_PL_WID</references>
        <references refid="classNRF24L01_1a958fa3e8a0457c0c655b9652ee9dbad4" compoundref="NRF24L01_8h" startline="1001" endline="1001">CSN_HIGH</references>
        <references refid="classNRF24L01_1a83cfc941bafe563f38e183504ee8533c" compoundref="NRF24L01_8cpp" startline="1145" endline="1148">FlushRx</references>
        <references refid="classNRF24L01_1ad311ef5130c99ab8ddca292adfe76603" compoundref="NRF24L01_8h" startline="995" endline="999">delay_ms</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1ae4067455572c6731211315b3900f5cbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NRF24L01::enableAckPayload</definition>
        <argsstring>(void)</argsstring>
        <name>enableAckPayload</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enable custom payloads on the acknowledge packets</para><para>Ack payloads are a handy way to return data back to senders without manually changing the radio modes on both units.</para><para><simplesect kind="note"><para>Ack payloads are dynamic payloads. This only works on pipes 0&amp;1 by default. Call <ref refid="classNRF24L01_1abd060c4df7efac781ed5812a0ee19d08" kindref="member">enableDynamicPayloads()</ref> to enable on all pipes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="754" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="641" bodyend="654"/>
        <references refid="classNRF24L01_1abfaaa54aff7ce60c4c844dd540c47af5" compoundref="NRF24L01_8cpp" startline="1081" endline="1088">WriteRegister</references>
        <references refid="NRF24L01registers_8h_1a0819cc8bd7ced28454f1753db8151e81" compoundref="NRF24L01registers_8h" startline="55">NRF24L01_REG_FEATURE</references>
        <references refid="classNRF24L01_1a6fc7da02296e9f91908e89438ba67901" compoundref="NRF24L01_8cpp" startline="1056" endline="1064">ReadRegister</references>
        <references refid="NRF24L01registers_8h_1afc39ba326140b456cd4e1d1ed7b22c7b" compoundref="NRF24L01registers_8h" startline="105">NRF24L01_REG_EN_ACK_PAY</references>
        <references refid="NRF24L01registers_8h_1a2660a02a6a8bb33f4e6e8c775b8d9e45" compoundref="NRF24L01registers_8h" startline="104">NRF24L01_REG_EN_DPL</references>
        <references refid="NRF24L01registers_8h_1a7be01f5b9fe0d16b38e4957419229a64" compoundref="NRF24L01registers_8h" startline="56">NRF24L01_REG_DYNPD</references>
        <references refid="NRF24L01registers_8h_1a8d923ba49b59dc3c5d021415f9c2f42c" compoundref="NRF24L01registers_8h" startline="102">NRF24L01_REG_DPL_P1</references>
        <references refid="NRF24L01registers_8h_1a570ef36957bec872985ad9272314d6d2" compoundref="NRF24L01registers_8h" startline="103">NRF24L01_REG_DPL_P0</references>
        <references refid="classNRF24L01_1ae319d1b6a3d950888d2608cc69efb07c" compoundref="NRF24L01_8h" startline="145">dynamic_payloads_enabled</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1abd060c4df7efac781ed5812a0ee19d08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NRF24L01::enableDynamicPayloads</definition>
        <argsstring>(void)</argsstring>
        <name>enableDynamicPayloads</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enable dynamically-sized payloads</para><para>This way you don&apos;t always have to send large packets just to send them once in a while. This enables dynamic payloads on ALL pipes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="763" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="611" bodyend="624"/>
        <references refid="classNRF24L01_1abfaaa54aff7ce60c4c844dd540c47af5" compoundref="NRF24L01_8cpp" startline="1081" endline="1088">WriteRegister</references>
        <references refid="NRF24L01registers_8h_1a0819cc8bd7ced28454f1753db8151e81" compoundref="NRF24L01registers_8h" startline="55">NRF24L01_REG_FEATURE</references>
        <references refid="classNRF24L01_1a6fc7da02296e9f91908e89438ba67901" compoundref="NRF24L01_8cpp" startline="1056" endline="1064">ReadRegister</references>
        <references refid="NRF24L01registers_8h_1a2660a02a6a8bb33f4e6e8c775b8d9e45" compoundref="NRF24L01registers_8h" startline="104">NRF24L01_REG_EN_DPL</references>
        <references refid="NRF24L01registers_8h_1a7be01f5b9fe0d16b38e4957419229a64" compoundref="NRF24L01registers_8h" startline="56">NRF24L01_REG_DYNPD</references>
        <references refid="NRF24L01registers_8h_1a2cbdcd93473fbce53081f73c98fbd3d8" compoundref="NRF24L01registers_8h" startline="98">NRF24L01_REG_DPL_P5</references>
        <references refid="NRF24L01registers_8h_1a4d0d0cb1f14c5b0e7d6c909ea85f83e8" compoundref="NRF24L01registers_8h" startline="99">NRF24L01_REG_DPL_P4</references>
        <references refid="NRF24L01registers_8h_1a4ce246688334498f90d1c23419873ad0" compoundref="NRF24L01registers_8h" startline="100">NRF24L01_REG_DPL_P3</references>
        <references refid="NRF24L01registers_8h_1acef1c51f731e85855713f61866d2e2ff" compoundref="NRF24L01registers_8h" startline="101">NRF24L01_REG_DPL_P2</references>
        <references refid="NRF24L01registers_8h_1a8d923ba49b59dc3c5d021415f9c2f42c" compoundref="NRF24L01registers_8h" startline="102">NRF24L01_REG_DPL_P1</references>
        <references refid="NRF24L01registers_8h_1a570ef36957bec872985ad9272314d6d2" compoundref="NRF24L01registers_8h" startline="103">NRF24L01_REG_DPL_P0</references>
        <references refid="classNRF24L01_1ae319d1b6a3d950888d2608cc69efb07c" compoundref="NRF24L01_8h" startline="145">dynamic_payloads_enabled</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1abf6bf0c18b2b12674cfbc150a2bdb778" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NRF24L01::disableDynamicPayloads</definition>
        <argsstring>(void)</argsstring>
        <name>disableDynamicPayloads</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Disable dynamically-sized payloads</para><para>This disables dynamic payloads on ALL pipes. Since Ack Payloads requires Dynamic Payloads, Ack Payloads are also disabled. If dynamic payloads are later re-enabled and ack payloads are desired then <ref refid="classNRF24L01_1ae4067455572c6731211315b3900f5cbd" kindref="member">enableAckPayload()</ref> must be called again as well. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="773" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="626" bodyend="639"/>
        <references refid="classNRF24L01_1abfaaa54aff7ce60c4c844dd540c47af5" compoundref="NRF24L01_8cpp" startline="1081" endline="1088">WriteRegister</references>
        <references refid="NRF24L01registers_8h_1a0819cc8bd7ced28454f1753db8151e81" compoundref="NRF24L01registers_8h" startline="55">NRF24L01_REG_FEATURE</references>
        <references refid="classNRF24L01_1a6fc7da02296e9f91908e89438ba67901" compoundref="NRF24L01_8cpp" startline="1056" endline="1064">ReadRegister</references>
        <references refid="NRF24L01registers_8h_1a2660a02a6a8bb33f4e6e8c775b8d9e45" compoundref="NRF24L01registers_8h" startline="104">NRF24L01_REG_EN_DPL</references>
        <references refid="NRF24L01registers_8h_1afc39ba326140b456cd4e1d1ed7b22c7b" compoundref="NRF24L01registers_8h" startline="105">NRF24L01_REG_EN_ACK_PAY</references>
        <references refid="NRF24L01registers_8h_1a7be01f5b9fe0d16b38e4957419229a64" compoundref="NRF24L01registers_8h" startline="56">NRF24L01_REG_DYNPD</references>
        <references refid="NRF24L01registers_8h_1a2cbdcd93473fbce53081f73c98fbd3d8" compoundref="NRF24L01registers_8h" startline="98">NRF24L01_REG_DPL_P5</references>
        <references refid="NRF24L01registers_8h_1a4d0d0cb1f14c5b0e7d6c909ea85f83e8" compoundref="NRF24L01registers_8h" startline="99">NRF24L01_REG_DPL_P4</references>
        <references refid="NRF24L01registers_8h_1a4ce246688334498f90d1c23419873ad0" compoundref="NRF24L01registers_8h" startline="100">NRF24L01_REG_DPL_P3</references>
        <references refid="NRF24L01registers_8h_1acef1c51f731e85855713f61866d2e2ff" compoundref="NRF24L01registers_8h" startline="101">NRF24L01_REG_DPL_P2</references>
        <references refid="NRF24L01registers_8h_1a8d923ba49b59dc3c5d021415f9c2f42c" compoundref="NRF24L01registers_8h" startline="102">NRF24L01_REG_DPL_P1</references>
        <references refid="NRF24L01registers_8h_1a570ef36957bec872985ad9272314d6d2" compoundref="NRF24L01registers_8h" startline="103">NRF24L01_REG_DPL_P0</references>
        <references refid="classNRF24L01_1ae319d1b6a3d950888d2608cc69efb07c" compoundref="NRF24L01_8h" startline="145">dynamic_payloads_enabled</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1aeaa968ea74bfd2690fff331e9f115344" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NRF24L01::enableDynamicAck</definition>
        <argsstring>()</argsstring>
        <name>enableDynamicAck</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enable dynamic ACKs (single write multicast or unicast) for chosen messages</para><para><simplesect kind="note"><para>To enable full multicast or per-pipe multicast, use <ref refid="classNRF24L01_1a33b1c7dd1cad95dae57ef87bf3dce5c8" kindref="member">setAutoAck()</ref></para></simplesect>
<simplesect kind="warning"><para>This MUST be called prior to attempting single write NOACK calls <programlisting><codeline><highlight class="normal">radio.enableDynamicAck();</highlight></codeline>
<codeline><highlight class="normal">radio.write(&amp;data,32,1);<sp/><sp/>//<sp/>Sends<sp/>a<sp/>payload<sp/>with<sp/>no<sp/>acknowledgement<sp/>requested</highlight></codeline>
<codeline><highlight class="normal">radio.write(&amp;data,32,0);<sp/><sp/>//<sp/>Sends<sp/>a<sp/>payload<sp/>using<sp/>auto-retry/autoACK</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="787" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="656" bodyend="664"/>
        <references refid="classNRF24L01_1abfaaa54aff7ce60c4c844dd540c47af5" compoundref="NRF24L01_8cpp" startline="1081" endline="1088">WriteRegister</references>
        <references refid="NRF24L01registers_8h_1a0819cc8bd7ced28454f1753db8151e81" compoundref="NRF24L01registers_8h" startline="55">NRF24L01_REG_FEATURE</references>
        <references refid="classNRF24L01_1a6fc7da02296e9f91908e89438ba67901" compoundref="NRF24L01_8cpp" startline="1056" endline="1064">ReadRegister</references>
        <references refid="NRF24L01registers_8h_1a5ef3505849cb731532f2a432fd566628" compoundref="NRF24L01registers_8h" startline="106">NRF24L01_REG_EN_DYN_ACK</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1ad05024c9586c1dc76c2fd95d54ce6b4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NRF24L01::isPVariant</definition>
        <argsstring>(void)</argsstring>
        <name>isPVariant</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine whether the hardware is an nRF24L01+ or not.</para><para><simplesect kind="return"><para>true if the hardware is nRF24L01+ (or compatible) and false if its not. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="795" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="695" bodyend="697"/>
        <references refid="classNRF24L01_1a082a99d802a3f2335da94e67cf8440ea" compoundref="NRF24L01_8h" startline="105">p_variant</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1a33b1c7dd1cad95dae57ef87bf3dce5c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NRF24L01::setAutoAck</definition>
        <argsstring>(bool enable)</argsstring>
        <name>setAutoAck</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enable or disable auto-acknowlede packets</para><para>This is enabled by default, so it&apos;s only needed if you want to turn it off for some reason.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to enable (true) or disable (false) auto-acks </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="804" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="699" bodyend="704"/>
        <references refid="classNRF24L01_1abfaaa54aff7ce60c4c844dd540c47af5" compoundref="NRF24L01_8cpp" startline="1081" endline="1088">WriteRegister</references>
        <references refid="NRF24L01registers_8h_1a4dc0921a9e237248b4f6d51b09832a2b" compoundref="NRF24L01registers_8h" startline="32">NRF24L01_REG_EN_AA</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1a79cab6f958c8d9e18273d7c4750480fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NRF24L01::setAutoAck</definition>
        <argsstring>(uint8_t pipe, bool enable)</argsstring>
        <name>setAutoAck</name>
        <param>
          <type>uint8_t</type>
          <declname>pipe</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enable or disable auto-acknowlede packets on a per pipeline basis.</para><para>AA is enabled by default, so it&apos;s only needed if you want to turn it off/on for some reason on a per pipeline basis.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pipe</parametername>
</parameternamelist>
<parameterdescription>
<para>Which pipeline to modify </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to enable (true) or disable (false) auto-acks </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="815" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="706" bodyend="716"/>
        <references refid="classNRF24L01_1a6fc7da02296e9f91908e89438ba67901" compoundref="NRF24L01_8cpp" startline="1056" endline="1064">ReadRegister</references>
        <references refid="NRF24L01registers_8h_1a4dc0921a9e237248b4f6d51b09832a2b" compoundref="NRF24L01registers_8h" startline="32">NRF24L01_REG_EN_AA</references>
        <references refid="classNRF24L01_1abfaaa54aff7ce60c4c844dd540c47af5" compoundref="NRF24L01_8cpp" startline="1081" endline="1088">WriteRegister</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1a7319961d6048e32546ad5df934bd42d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NRF24L01::setPALevel</definition>
        <argsstring>(uint8_t level)</argsstring>
        <name>setPALevel</name>
        <param>
          <type>uint8_t</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set Power Amplifier (PA) level to one of four levels: RF24_PA_MIN, RF24_PA_LOW, RF24_PA_HIGH and RF24_PA_MAX</para><para>The power levels correspond to the following output levels respectively: <ref refid="classNRF24L01" kindref="compound">NRF24L01</ref>: -18dBm, -12dBm,-6dBM, and 0dBm</para><para>SI24R1: -6dBm, 0dBm, 3dBM, and 7dBm.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired PA level. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="827" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="726" bodyend="738"/>
        <references refid="classNRF24L01_1a6fc7da02296e9f91908e89438ba67901" compoundref="NRF24L01_8cpp" startline="1056" endline="1064">ReadRegister</references>
        <references refid="NRF24L01registers_8h_1a7344c4ea38d1f2296b9163c02e17bd8d" compoundref="NRF24L01registers_8h" startline="37">NRF24L01_REG_RF_SETUP</references>
        <references refid="NRF24L01_8h_1a1e4cd0bea93e6b43422855fb0120aaceab0bfc94c4095e9495b2e49530b623d0d" compoundref="NRF24L01_8h" startline="75">RF24_PA_MAX</references>
        <references refid="classNRF24L01_1abfaaa54aff7ce60c4c844dd540c47af5" compoundref="NRF24L01_8cpp" startline="1081" endline="1088">WriteRegister</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1a8fdb80b79100186afad90d9a2a5c79fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t NRF24L01::getPALevel</definition>
        <argsstring>(void)</argsstring>
        <name>getPALevel</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fetches the current PA level.</para><para><ref refid="classNRF24L01" kindref="compound">NRF24L01</ref>: -18dBm, -12dBm, -6dBm and 0dBm SI24R1: -6dBm, 0dBm, 3dBm, 7dBm</para><para><simplesect kind="return"><para>Returns values 0 to 3 representing the PA Level. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="837" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="740" bodyend="743"/>
        <references refid="classNRF24L01_1a6fc7da02296e9f91908e89438ba67901" compoundref="NRF24L01_8cpp" startline="1056" endline="1064">ReadRegister</references>
        <references refid="NRF24L01registers_8h_1a7344c4ea38d1f2296b9163c02e17bd8d" compoundref="NRF24L01registers_8h" startline="37">NRF24L01_REG_RF_SETUP</references>
        <references refid="NRF24L01registers_8h_1ab9dfc6927495c92ef82df6e1c98eea06" compoundref="NRF24L01registers_8h" startline="109">NRF24L01_REG_RF_PWR_LOW</references>
        <references refid="NRF24L01registers_8h_1aaca2342ed7eb4da1691c4d647a9adb39" compoundref="NRF24L01registers_8h" startline="110">NRF24L01_REG_RF_PWR_HIGH</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1a9db0803c6d87e6ada7febea2240a7b1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NRF24L01::setDataRate</definition>
        <argsstring>(uint8_t speed)</argsstring>
        <name>setDataRate</name>
        <param>
          <type>uint8_t</type>
          <declname>speed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the transmission data rate</para><para><simplesect kind="warning"><para>setting RF24_250KBPS will fail for non-plus units</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>speed</parametername>
</parameternamelist>
<parameterdescription>
<para>RF24_250KBPS for 250kbs, RF24_1MBPS for 1Mbps, or RF24_2MBPS for 2Mbps </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the change was successful </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="846" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="745" bodyend="778"/>
        <references refid="classNRF24L01_1a6fc7da02296e9f91908e89438ba67901" compoundref="NRF24L01_8cpp" startline="1056" endline="1064">ReadRegister</references>
        <references refid="NRF24L01registers_8h_1a7344c4ea38d1f2296b9163c02e17bd8d" compoundref="NRF24L01registers_8h" startline="37">NRF24L01_REG_RF_SETUP</references>
        <references refid="NRF24L01registers_8h_1a5860d87932a33fac92398f92cbcb9f23" compoundref="NRF24L01registers_8h" startline="107">NRF24L01_REG_RF_DR_LOW</references>
        <references refid="NRF24L01registers_8h_1a897e8493a10b6d8f60fdd1284c02479f" compoundref="NRF24L01registers_8h" startline="108">NRF24L01_REG_RF_DR_HIGH</references>
        <references refid="classNRF24L01_1a1feaab910ecff17805f8141fe40028e7" compoundref="NRF24L01_8h" startline="905">txDelay</references>
        <references refid="NRF24L01_8h_1a82745de4aa1251b7561564b3ed1d6522ad6a241689903e120c99b6963cb98c97c" compoundref="NRF24L01_8h" startline="82">RF24_250KBPS</references>
        <references refid="NRF24L01_8h_1a82745de4aa1251b7561564b3ed1d6522a53050a70cedbbf10620ba0fe2b043f1b" compoundref="NRF24L01_8h" startline="82">RF24_2MBPS</references>
        <references refid="classNRF24L01_1abfaaa54aff7ce60c4c844dd540c47af5" compoundref="NRF24L01_8cpp" startline="1081" endline="1088">WriteRegister</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1a6184de85c94400cde96b7f83b316efa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="NRF24L01_8h_1a82745de4aa1251b7561564b3ed1d6522" kindref="member">rf24_datarate_e</ref></type>
        <definition>rf24_datarate_e NRF24L01::getDataRate</definition>
        <argsstring>(void)</argsstring>
        <name>getDataRate</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fetches the transmission data rate</para><para><simplesect kind="return"><para>Returns the hardware&apos;s currently configured datarate. The value is one of 250kbs, RF24_1MBPS for 1Mbps, or RF24_2MBPS, as defined in the rf24_datarate_e enum. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="855" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="781" bodyend="798"/>
        <references refid="classNRF24L01_1a6fc7da02296e9f91908e89438ba67901" compoundref="NRF24L01_8cpp" startline="1056" endline="1064">ReadRegister</references>
        <references refid="NRF24L01registers_8h_1a7344c4ea38d1f2296b9163c02e17bd8d" compoundref="NRF24L01registers_8h" startline="37">NRF24L01_REG_RF_SETUP</references>
        <references refid="NRF24L01registers_8h_1a5860d87932a33fac92398f92cbcb9f23" compoundref="NRF24L01registers_8h" startline="107">NRF24L01_REG_RF_DR_LOW</references>
        <references refid="NRF24L01registers_8h_1a897e8493a10b6d8f60fdd1284c02479f" compoundref="NRF24L01registers_8h" startline="108">NRF24L01_REG_RF_DR_HIGH</references>
        <references refid="NRF24L01_8h_1a82745de4aa1251b7561564b3ed1d6522ad6a241689903e120c99b6963cb98c97c" compoundref="NRF24L01_8h" startline="82">RF24_250KBPS</references>
        <references refid="NRF24L01_8h_1a82745de4aa1251b7561564b3ed1d6522a53050a70cedbbf10620ba0fe2b043f1b" compoundref="NRF24L01_8h" startline="82">RF24_2MBPS</references>
        <references refid="NRF24L01_8h_1a82745de4aa1251b7561564b3ed1d6522afd01f3fd55247a67c0bcfd459fe17fdf" compoundref="NRF24L01_8h" startline="82">RF24_1MBPS</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1a6081dd6dd9cdffbc1c7534ee1824201d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NRF24L01::setCRCLength</definition>
        <argsstring>(uint8_t length)</argsstring>
        <name>setCRCLength</name>
        <param>
          <type>uint8_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the CRC length <linebreak/>
CRC checking cannot be disabled if auto-ack is enabled <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>RF24_CRC_8 for 8-bit or RF24_CRC_16 for 16-bit </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="862" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="800" bodyend="813"/>
        <references refid="classNRF24L01_1a6fc7da02296e9f91908e89438ba67901" compoundref="NRF24L01_8cpp" startline="1056" endline="1064">ReadRegister</references>
        <references refid="NRF24L01registers_8h_1a71b3597b405d855e19ef435a215edacc" compoundref="NRF24L01registers_8h" startline="31">NRF24L01_REG_CONFIG</references>
        <references refid="NRF24L01registers_8h_1a6eba0160227b56161ff3d8971c17dac9" compoundref="NRF24L01registers_8h" startline="63">NRF24L01_REG_CRCO</references>
        <references refid="NRF24L01registers_8h_1a13e595f734f122da3feea0f8c42748db" compoundref="NRF24L01registers_8h" startline="62">NRF24L01_REG_EN_CRC</references>
        <references refid="NRF24L01_8h_1adbe00719f3f835c82bd007081d040a7ea77871b6e6fac61d79be7edf1a60b9cbf" compoundref="NRF24L01_8h" startline="89">RF24_CRC_DISABLED</references>
        <references refid="NRF24L01_8h_1adbe00719f3f835c82bd007081d040a7eade0b6b3a0dd8729e2a17c49896e0a468" compoundref="NRF24L01_8h" startline="89">RF24_CRC_8</references>
        <references refid="classNRF24L01_1abfaaa54aff7ce60c4c844dd540c47af5" compoundref="NRF24L01_8cpp" startline="1081" endline="1088">WriteRegister</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1ac83fb86df156475aeda2ef637078fcd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="NRF24L01_8h_1adbe00719f3f835c82bd007081d040a7e" kindref="member">rf24_crclength_e</ref></type>
        <definition>rf24_crclength_e NRF24L01::getCRCLength</definition>
        <argsstring>(void)</argsstring>
        <name>getCRCLength</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the CRC length <linebreak/>
CRC checking cannot be disabled if auto-ack is enabled <simplesect kind="return"><para>RF24_CRC_DISABLED if disabled or RF24_CRC_8 for 8-bit or RF24_CRC_16 for 16-bit </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="868" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="815" bodyend="829"/>
        <references refid="NRF24L01_8h_1adbe00719f3f835c82bd007081d040a7ea77871b6e6fac61d79be7edf1a60b9cbf" compoundref="NRF24L01_8h" startline="89">RF24_CRC_DISABLED</references>
        <references refid="classNRF24L01_1a6fc7da02296e9f91908e89438ba67901" compoundref="NRF24L01_8cpp" startline="1056" endline="1064">ReadRegister</references>
        <references refid="NRF24L01registers_8h_1a71b3597b405d855e19ef435a215edacc" compoundref="NRF24L01registers_8h" startline="31">NRF24L01_REG_CONFIG</references>
        <references refid="NRF24L01registers_8h_1a6eba0160227b56161ff3d8971c17dac9" compoundref="NRF24L01registers_8h" startline="63">NRF24L01_REG_CRCO</references>
        <references refid="NRF24L01registers_8h_1a13e595f734f122da3feea0f8c42748db" compoundref="NRF24L01registers_8h" startline="62">NRF24L01_REG_EN_CRC</references>
        <references refid="NRF24L01registers_8h_1a4dc0921a9e237248b4f6d51b09832a2b" compoundref="NRF24L01registers_8h" startline="32">NRF24L01_REG_EN_AA</references>
        <references refid="NRF24L01_8h_1adbe00719f3f835c82bd007081d040a7ea6eeb0379e23be63559106d96ada47a56" compoundref="NRF24L01_8h" startline="89">RF24_CRC_16</references>
        <references refid="NRF24L01_8h_1adbe00719f3f835c82bd007081d040a7eade0b6b3a0dd8729e2a17c49896e0a468" compoundref="NRF24L01_8h" startline="89">RF24_CRC_8</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1a1e997f3c946acdbe8bd622e431f80034" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NRF24L01::disableCRC</definition>
        <argsstring>(void)</argsstring>
        <name>disableCRC</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Disable CRC validation</para><para><simplesect kind="warning"><para>CRC cannot be disabled if auto-ack/ESB is enabled. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="875" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="831" bodyend="834"/>
        <references refid="classNRF24L01_1a6fc7da02296e9f91908e89438ba67901" compoundref="NRF24L01_8cpp" startline="1056" endline="1064">ReadRegister</references>
        <references refid="NRF24L01registers_8h_1a71b3597b405d855e19ef435a215edacc" compoundref="NRF24L01registers_8h" startline="31">NRF24L01_REG_CONFIG</references>
        <references refid="NRF24L01registers_8h_1a13e595f734f122da3feea0f8c42748db" compoundref="NRF24L01registers_8h" startline="62">NRF24L01_REG_EN_CRC</references>
        <references refid="classNRF24L01_1abfaaa54aff7ce60c4c844dd540c47af5" compoundref="NRF24L01_8cpp" startline="1081" endline="1088">WriteRegister</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1ad23d4111c3a26d18db51eb72a5491dbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NRF24L01::maskIRQ</definition>
        <argsstring>(bool tx_ok, bool tx_fail, bool rx_ready)</argsstring>
        <name>maskIRQ</name>
        <param>
          <type>bool</type>
          <declname>tx_ok</declname>
          <defname>tx</defname>
        </param>
        <param>
          <type>bool</type>
          <declname>tx_fail</declname>
          <defname>fail</defname>
        </param>
        <param>
          <type>bool</type>
          <declname>rx_ready</declname>
          <defname>rx</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The radio will generate interrupt signals when a transmission is complete, a transmission fails, or a payload is received. This allows users to mask those interrupts to prevent them from generating a signal on the interrupt pin. Interrupts are enabled on the radio chip by default.</para><para><programlisting><codeline><highlight class="normal">Mask<sp/>all<sp/>interrupts<sp/>except<sp/>the<sp/>receive<sp/>interrupt:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">radio.maskIRQ(1,1,0);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tx_ok</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask transmission complete interrupts </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tx_fail</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask transmit failure interrupts </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rx_ready</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask payload received interrupts</para></parameterdescription>
</parameteritem>
</parameterlist>
bool <ref refid="classNRF24L01_1a9351f4bff2196c4f69623f636de7c6a4" kindref="member">NRF24L01::txStandBy(uint32_t timeout, bool startTx)</ref>{ <verbatim>if(startTx){
  stopListening();
  CE_HIGH();
}
uint32_t start = millis();

while( ! (ReadRegister(NRF24L01_REG_FIFO_STATUS) &amp; _BV(NRF24L01_REG_TX_EMPTY)) ){
    if( GetStatus() &amp; _BV(NRF24L01_REG_MAX_RT)){
        WriteRegister(NRF24L01_REG_STATUS,_BV(NRF24L01_REG_MAX_RT) );
        CE_LOW();                                     //Set re-transmit
        CE_HIGH();
            if(millis() - start &gt;= timeout){
                CE_LOW(); FlushTx(); return 0;
            }
    }

}


CE_LOW();                  //Set STANDBY-I mode
return 1;
</verbatim></para><para>} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="892" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="1009" bodyend="1017"/>
        <references refid="classNRF24L01_1a6fc7da02296e9f91908e89438ba67901" compoundref="NRF24L01_8cpp" startline="1056" endline="1064">ReadRegister</references>
        <references refid="NRF24L01registers_8h_1a71b3597b405d855e19ef435a215edacc" compoundref="NRF24L01registers_8h" startline="31">NRF24L01_REG_CONFIG</references>
        <references refid="NRF24L01registers_8h_1ac16635ddd6f66d55990cfc526dedbc1a" compoundref="NRF24L01registers_8h" startline="61">NRF24L01_REG_MASK_MAX_RT</references>
        <references refid="NRF24L01registers_8h_1a2e080fce62016b92e7d42519e17e1259" compoundref="NRF24L01registers_8h" startline="60">NRF24L01_REG_MASK_TX_DS</references>
        <references refid="NRF24L01registers_8h_1ab600bb73d205bb30ee182bbdd0fe96c0" compoundref="NRF24L01registers_8h" startline="59">NRF24L01_REG_MASK_RX_DR</references>
        <references refid="classNRF24L01_1abfaaa54aff7ce60c4c844dd540c47af5" compoundref="NRF24L01_8cpp" startline="1081" endline="1088">WriteRegister</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1a02c91592a6c762c1a4e86252f8958bd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NRF24L01::openReadingPipe</definition>
        <argsstring>(uint8_t number, uint64_t address)</argsstring>
        <name>openReadingPipe</name>
        <param>
          <type>uint8_t</type>
          <declname>number</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Open a pipe for reading <simplesect kind="note"><para>For compatibility with old code only, see new function</para></simplesect>
<simplesect kind="warning"><para>Pipes 1-5 should share the first 32 bits. Only the least significant byte should be unique, e.g. <programlisting><codeline><highlight class="normal">openReadingPipe(1,0xF0F0F0F0AA);</highlight></codeline>
<codeline><highlight class="normal">openReadingPipe(2,0xF0F0F0F066);</highlight></codeline>
</programlisting></para></simplesect>
<simplesect kind="warning"><para>Pipe 0 is also used by the writing pipe. So if you open pipe 0 for reading, and then <ref refid="classNRF24L01_1aaabd39829998b609c0dc317af4f141b2" kindref="member">startListening()</ref>, it will overwrite the writing pipe. Ergo, do an <ref refid="classNRF24L01_1ad64a887cae746be5ca43cf08445feed9" kindref="member">openWritingPipe()</ref> again before <ref refid="classNRF24L01_1a719390c69a2e45df08379f17e3289f4c" kindref="member">write()</ref>.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>number</parametername>
</parameternamelist>
<parameterdescription>
<para>Which pipe# to open, 0-5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>The 40-bit address of the pipe to open. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="935" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="575" bodyend="597"/>
        <references refid="classNRF24L01_1af836ff0a915587aa40b5eabe4101ea4c" compoundref="NRF24L01_8h" startline="125">pipe0_reading_address</references>
        <references refid="classNRF24L01_1a0b5c60487c6b715b9f17f968f7958d93" compoundref="NRF24L01_8h" startline="123">NRF24L01_ADDRSIZE</references>
        <references refid="classNRF24L01_1ac7d69c51eca87f16fa3a30b5e8aa85cb" compoundref="NRF24L01_8cpp" startline="1091" endline="1100">WriteRegisters</references>
        <references refid="NRF24L01_8cpp_1abb559312d5695b2e999a6f9c1c70f43e" compoundref="NRF24L01_8cpp" startline="531">child_pipe</references>
        <references refid="classNRF24L01_1abfaaa54aff7ce60c4c844dd540c47af5" compoundref="NRF24L01_8cpp" startline="1081" endline="1088">WriteRegister</references>
        <references refid="NRF24L01_8cpp_1a7f2a8ffadcb84a16a11236e320dec823" compoundref="NRF24L01_8cpp" startline="535">child_payload_size</references>
        <references refid="classNRF24L01_1a6f035e7c49d8ed5e1ab84242cef0e9be" compoundref="NRF24L01_8h" startline="109">NRF24L01_PAYLOAD</references>
        <references refid="NRF24L01registers_8h_1a1ece6e2d8eda4cbda7576562213fe72a" compoundref="NRF24L01registers_8h" startline="33">NRF24L01_REG_EN_RXADDR</references>
        <references refid="classNRF24L01_1a6fc7da02296e9f91908e89438ba67901" compoundref="NRF24L01_8cpp" startline="1056" endline="1064">ReadRegister</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1a0fe37f8ff95b7c562ad1fc277890e29a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NRF24L01::openWritingPipe</definition>
        <argsstring>(uint64_t address)</argsstring>
        <name>openWritingPipe</name>
        <param>
          <type>uint64_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Open a pipe for writing <simplesect kind="note"><para>For compatibility with old code only, see new function</para></simplesect>
Addresses are 40-bit hex values, e.g.:</para><para><programlisting><codeline><highlight class="normal">openWritingPipe(0xF0F0F0F0F0);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>The 40-bit address of the pipe to open. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="949" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="517" bodyend="528"/>
        <references refid="classNRF24L01_1ac7d69c51eca87f16fa3a30b5e8aa85cb" compoundref="NRF24L01_8cpp" startline="1091" endline="1100">WriteRegisters</references>
        <references refid="NRF24L01registers_8h_1afcaaf2d19fb6b9ebd0b122d173c13b88" compoundref="NRF24L01registers_8h" startline="41">NRF24L01_REG_RX_ADDR_P0</references>
        <references refid="classNRF24L01_1a0b5c60487c6b715b9f17f968f7958d93" compoundref="NRF24L01_8h" startline="123">NRF24L01_ADDRSIZE</references>
        <references refid="NRF24L01registers_8h_1abbc9a49c2fa8649b95faaca41dda30a0" compoundref="NRF24L01registers_8h" startline="47">NRF24L01_REG_TX_ADDR</references>
        <references refid="classNRF24L01_1abfaaa54aff7ce60c4c844dd540c47af5" compoundref="NRF24L01_8cpp" startline="1081" endline="1088">WriteRegister</references>
        <references refid="NRF24L01registers_8h_1ae87408247e1b981750056d2b07817982" compoundref="NRF24L01registers_8h" startline="48">NRF24L01_REG_RX_PW_P0</references>
        <references refid="classNRF24L01_1a6f035e7c49d8ed5e1ab84242cef0e9be" compoundref="NRF24L01_8h" startline="109">NRF24L01_PAYLOAD</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1ad311ef5130c99ab8ddca292adfe76603" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NRF24L01::delay_ms</definition>
        <argsstring>(uint16_t ms)</argsstring>
        <name>delay_ms</name>
        <param>
          <type>uint16_t</type>
          <declname>ms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="995" column="1" bodyfile="src/Wireless/NRF24L01.h" bodystart="995" bodyend="999"/>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1a958fa3e8a0457c0c655b9652ee9dbad4" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NRF24L01::CSN_HIGH</definition>
        <argsstring>()</argsstring>
        <name>CSN_HIGH</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="1001" column="1" bodyfile="src/Wireless/NRF24L01.h" bodystart="1001" bodyend="1001"/>
        <references refid="NRF24L01_8h_1aaaa13b2c8dc446b73ab64c28c9fa776a" compoundref="NRF24L01_8h" startline="36">NRF24L01_PORT</references>
        <references refid="classNRF24L01_1a4d36b61597b9919dd4a0ecdc53526020" compoundref="NRF24L01_8h" startline="102">NRF24L01_CSN</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1acffaad2c6b5e3713f7fe6af22d4553ef" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NRF24L01::CSN_LOW</definition>
        <argsstring>()</argsstring>
        <name>CSN_LOW</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="1002" column="1" bodyfile="src/Wireless/NRF24L01.h" bodystart="1002" bodyend="1002"/>
        <references refid="NRF24L01_8h_1aaaa13b2c8dc446b73ab64c28c9fa776a" compoundref="NRF24L01_8h" startline="36">NRF24L01_PORT</references>
        <references refid="classNRF24L01_1a4d36b61597b9919dd4a0ecdc53526020" compoundref="NRF24L01_8h" startline="102">NRF24L01_CSN</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1a85274c10cbe6317796a209913bfb0253" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NRF24L01::CE_HIGH</definition>
        <argsstring>()</argsstring>
        <name>CE_HIGH</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="1003" column="1" bodyfile="src/Wireless/NRF24L01.h" bodystart="1003" bodyend="1003"/>
        <references refid="NRF24L01_8h_1aaaa13b2c8dc446b73ab64c28c9fa776a" compoundref="NRF24L01_8h" startline="36">NRF24L01_PORT</references>
        <references refid="classNRF24L01_1a56a20345fcb667fcfc9bc1cb62d5152f" compoundref="NRF24L01_8h" startline="101">NRF24L01_CE</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1aa5e261363986c590c90e7cb2adc2d75d" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NRF24L01::CE_LOW</definition>
        <argsstring>()</argsstring>
        <name>CE_LOW</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="1004" column="1" bodyfile="src/Wireless/NRF24L01.h" bodystart="1004" bodyend="1004"/>
        <references refid="NRF24L01_8h_1aaaa13b2c8dc446b73ab64c28c9fa776a" compoundref="NRF24L01_8h" startline="36">NRF24L01_PORT</references>
        <references refid="classNRF24L01_1a56a20345fcb667fcfc9bc1cb62d5152f" compoundref="NRF24L01_8h" startline="101">NRF24L01_CE</references>
        <references refid="classNRF24L01_1a9766146f8b6bcab59e91e7545484c401" compoundref="NRF24L01_8cpp" startline="1067" endline="1078">ReadRegisters</references>
        <references refid="classNRF24L01_1a6fc7da02296e9f91908e89438ba67901" compoundref="NRF24L01_8cpp" startline="1056" endline="1064">ReadRegister</references>
        <references refid="classNRF24L01_1ac7d69c51eca87f16fa3a30b5e8aa85cb" compoundref="NRF24L01_8cpp" startline="1091" endline="1100">WriteRegisters</references>
        <references refid="classNRF24L01_1abfaaa54aff7ce60c4c844dd540c47af5" compoundref="NRF24L01_8cpp" startline="1081" endline="1088">WriteRegister</references>
        <references refid="classNRF24L01_1a9abae657dc54d97b6eb63f33c83e9f59" compoundref="NRF24L01_8cpp" startline="1103" endline="1121">WritePayload</references>
        <references refid="classNRF24L01_1ad733911b261f73964817dad526745716" compoundref="NRF24L01_8cpp" startline="1123" endline="1141">ReadPayload</references>
        <references refid="classNRF24L01_1a83cfc941bafe563f38e183504ee8533c" compoundref="NRF24L01_8cpp" startline="1145" endline="1148">FlushRx</references>
        <references refid="classNRF24L01_1a95faa729cb8245516e9eb0248c6d9b0f" compoundref="NRF24L01_8cpp" startline="293" endline="297">getStatus</references>
        <references refid="classNRF24L01_1aceeaa16f91d7c5fd6a429a6adf678bd4" compoundref="NRF24L01_8cpp" startline="604" endline="609">ToggleFeatures</references>
        <references refid="classNRF24L01_1ab604b1e177e4812e33ebc39287503197" compoundref="NRF24L01_8cpp" startline="1157" endline="1166">spiTrans</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Low-level internal interface.</header>
      <description><para>Protected methods that address the chip directly. Regular users cannot ever call these. They are documented for completeness and for developers who may want to extend this class. </para></description>
      <memberdef kind="function" id="classNRF24L01_1a9766146f8b6bcab59e91e7545484c401" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t NRF24L01::ReadRegisters</definition>
        <argsstring>(uint8_t reg, uint8_t *buf, uint8_t len)</argsstring>
        <name>ReadRegisters</name>
        <param>
          <type>uint8_t</type>
          <declname>reg</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read a chunk of data in from a register</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Which register. Use constants from nRF24L01.h </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to put the data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>How many bytes of data to transfer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current value of status register </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="1023" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="1067" bodyend="1078"/>
        <references refid="classNRF24L01_1acffaad2c6b5e3713f7fe6af22d4553ef" compoundref="NRF24L01_8h" startline="1002" endline="1002">CSN_LOW</references>
        <references refid="classNRF24L01_1a6321af25fee367445baa6ab4840f8443" compoundref="NRF24L01_8h" startline="989">spi</references>
        <references refid="classSPI_1ad2c97b15ee0417c355a899c28d2efa5d" compoundref="SPI_8cpp" startline="79" endline="83">SPI::WriteReadbyte</references>
        <references refid="NRF24L01registers_8h_1a2a1311d2c31503729e5cd0051c45dfe3" compoundref="NRF24L01registers_8h" startline="113">NRF24L01_CMD_R_REGISTER</references>
        <references refid="NRF24L01registers_8h_1a3b71c0d117789380e37fda6090b35d60" compoundref="NRF24L01registers_8h" startline="115">NRF24L01_CMD_REGISTER_MASK</references>
        <references refid="NRF24L01registers_8h_1a34038777861e0c105a76ec3d46cfd2d9" compoundref="NRF24L01registers_8h" startline="124">NRF24L01_CMD_NOP</references>
        <references refid="classNRF24L01_1a958fa3e8a0457c0c655b9652ee9dbad4" compoundref="NRF24L01_8h" startline="1001" endline="1001">CSN_HIGH</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1a6fc7da02296e9f91908e89438ba67901" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t NRF24L01::ReadRegister</definition>
        <argsstring>(uint8_t reg)</argsstring>
        <name>ReadRegister</name>
        <param>
          <type>uint8_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read single byte from a register</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Which register. Use constants from nRF24L01.h </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current value of register <computeroutput>reg</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="1031" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="1056" bodyend="1064"/>
        <references refid="classNRF24L01_1acffaad2c6b5e3713f7fe6af22d4553ef" compoundref="NRF24L01_8h" startline="1002" endline="1002">CSN_LOW</references>
        <references refid="classNRF24L01_1a6321af25fee367445baa6ab4840f8443" compoundref="NRF24L01_8h" startline="989">spi</references>
        <references refid="classSPI_1ad2c97b15ee0417c355a899c28d2efa5d" compoundref="SPI_8cpp" startline="79" endline="83">SPI::WriteReadbyte</references>
        <references refid="NRF24L01registers_8h_1a2a1311d2c31503729e5cd0051c45dfe3" compoundref="NRF24L01registers_8h" startline="113">NRF24L01_CMD_R_REGISTER</references>
        <references refid="NRF24L01registers_8h_1a3b71c0d117789380e37fda6090b35d60" compoundref="NRF24L01registers_8h" startline="115">NRF24L01_CMD_REGISTER_MASK</references>
        <references refid="NRF24L01registers_8h_1a34038777861e0c105a76ec3d46cfd2d9" compoundref="NRF24L01registers_8h" startline="124">NRF24L01_CMD_NOP</references>
        <references refid="classNRF24L01_1a958fa3e8a0457c0c655b9652ee9dbad4" compoundref="NRF24L01_8h" startline="1001" endline="1001">CSN_HIGH</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1ac7d69c51eca87f16fa3a30b5e8aa85cb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t NRF24L01::WriteRegisters</definition>
        <argsstring>(uint8_t reg, const uint8_t *buf, uint8_t len)</argsstring>
        <name>WriteRegisters</name>
        <param>
          <type>uint8_t</type>
          <declname>reg</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write a chunk of data to a register</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Which register. Use constants from nRF24L01.h </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to get the data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>How many bytes of data to transfer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current value of status register </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="1041" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="1091" bodyend="1100"/>
        <references refid="classNRF24L01_1acffaad2c6b5e3713f7fe6af22d4553ef" compoundref="NRF24L01_8h" startline="1002" endline="1002">CSN_LOW</references>
        <references refid="classNRF24L01_1a6321af25fee367445baa6ab4840f8443" compoundref="NRF24L01_8h" startline="989">spi</references>
        <references refid="classSPI_1ad2c97b15ee0417c355a899c28d2efa5d" compoundref="SPI_8cpp" startline="79" endline="83">SPI::WriteReadbyte</references>
        <references refid="NRF24L01registers_8h_1aafb2cf802c07e6e69817126c120081a6" compoundref="NRF24L01registers_8h" startline="114">NRF24L01_CMD_W_REGISTER</references>
        <references refid="NRF24L01registers_8h_1a3b71c0d117789380e37fda6090b35d60" compoundref="NRF24L01registers_8h" startline="115">NRF24L01_CMD_REGISTER_MASK</references>
        <references refid="classNRF24L01_1a958fa3e8a0457c0c655b9652ee9dbad4" compoundref="NRF24L01_8h" startline="1001" endline="1001">CSN_HIGH</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1abfaaa54aff7ce60c4c844dd540c47af5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t NRF24L01::WriteRegister</definition>
        <argsstring>(uint8_t reg, uint8_t value)</argsstring>
        <name>WriteRegister</name>
        <param>
          <type>uint8_t</type>
          <declname>reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write a single byte to a register</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Which register. Use constants from nRF24L01.h </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The new value to write </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current value of status register </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="1050" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="1081" bodyend="1088"/>
        <references refid="classNRF24L01_1acffaad2c6b5e3713f7fe6af22d4553ef" compoundref="NRF24L01_8h" startline="1002" endline="1002">CSN_LOW</references>
        <references refid="classNRF24L01_1a6321af25fee367445baa6ab4840f8443" compoundref="NRF24L01_8h" startline="989">spi</references>
        <references refid="classSPI_1ad2c97b15ee0417c355a899c28d2efa5d" compoundref="SPI_8cpp" startline="79" endline="83">SPI::WriteReadbyte</references>
        <references refid="NRF24L01registers_8h_1aafb2cf802c07e6e69817126c120081a6" compoundref="NRF24L01registers_8h" startline="114">NRF24L01_CMD_W_REGISTER</references>
        <references refid="NRF24L01registers_8h_1a3b71c0d117789380e37fda6090b35d60" compoundref="NRF24L01registers_8h" startline="115">NRF24L01_CMD_REGISTER_MASK</references>
        <references refid="classNRF24L01_1a958fa3e8a0457c0c655b9652ee9dbad4" compoundref="NRF24L01_8h" startline="1001" endline="1001">CSN_HIGH</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1a9abae657dc54d97b6eb63f33c83e9f59" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t NRF24L01::WritePayload</definition>
        <argsstring>(const void *buf, uint8_t len, const uint8_t writeType)</argsstring>
        <name>WritePayload</name>
        <param>
          <type>const void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>writeType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write the transmit payload</para><para>The size of data written is the fixed payload size, see <ref refid="classNRF24L01_1a4a7f48ca92e14baabd8be1c0831e8c2f" kindref="member">getPayloadSize()</ref></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to get the data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to be sent </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current value of status register </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="1061" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="1103" bodyend="1121"/>
        <references refid="NRF24L01_8h_1a803c01bff6ebb264fb8b4438eb65f098" compoundref="NRF24L01_8h" startline="60">rf24_min</references>
        <references refid="classNRF24L01_1a6f035e7c49d8ed5e1ab84242cef0e9be" compoundref="NRF24L01_8h" startline="109">NRF24L01_PAYLOAD</references>
        <references refid="classNRF24L01_1ae319d1b6a3d950888d2608cc69efb07c" compoundref="NRF24L01_8h" startline="145">dynamic_payloads_enabled</references>
        <references refid="classNRF24L01_1acffaad2c6b5e3713f7fe6af22d4553ef" compoundref="NRF24L01_8h" startline="1002" endline="1002">CSN_LOW</references>
        <references refid="classNRF24L01_1a6321af25fee367445baa6ab4840f8443" compoundref="NRF24L01_8h" startline="989">spi</references>
        <references refid="classSPI_1ad2c97b15ee0417c355a899c28d2efa5d" compoundref="SPI_8cpp" startline="79" endline="83">SPI::WriteReadbyte</references>
        <references refid="classNRF24L01_1a958fa3e8a0457c0c655b9652ee9dbad4" compoundref="NRF24L01_8h" startline="1001" endline="1001">CSN_HIGH</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1ad733911b261f73964817dad526745716" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t NRF24L01::ReadPayload</definition>
        <argsstring>(void *buf, uint8_t len)</argsstring>
        <name>ReadPayload</name>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read the receive payload</para><para>The size of data read is the fixed payload size, see <ref refid="classNRF24L01_1a4a7f48ca92e14baabd8be1c0831e8c2f" kindref="member">getPayloadSize()</ref></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to put the data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of bytes to read </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current value of status register </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="1072" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="1123" bodyend="1141"/>
        <references refid="classNRF24L01_1a6f035e7c49d8ed5e1ab84242cef0e9be" compoundref="NRF24L01_8h" startline="109">NRF24L01_PAYLOAD</references>
        <references refid="classNRF24L01_1ae319d1b6a3d950888d2608cc69efb07c" compoundref="NRF24L01_8h" startline="145">dynamic_payloads_enabled</references>
        <references refid="classNRF24L01_1acffaad2c6b5e3713f7fe6af22d4553ef" compoundref="NRF24L01_8h" startline="1002" endline="1002">CSN_LOW</references>
        <references refid="classNRF24L01_1a6321af25fee367445baa6ab4840f8443" compoundref="NRF24L01_8h" startline="989">spi</references>
        <references refid="classSPI_1ad2c97b15ee0417c355a899c28d2efa5d" compoundref="SPI_8cpp" startline="79" endline="83">SPI::WriteReadbyte</references>
        <references refid="NRF24L01registers_8h_1a9283a0e899f8995bfc12a5e0e042621a" compoundref="NRF24L01registers_8h" startline="118">NRF24L01_CMD_R_RX_PAYLOAD</references>
        <references refid="classNRF24L01_1a958fa3e8a0457c0c655b9652ee9dbad4" compoundref="NRF24L01_8h" startline="1001" endline="1001">CSN_HIGH</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1a83cfc941bafe563f38e183504ee8533c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t NRF24L01::FlushRx</definition>
        <argsstring>(void)</argsstring>
        <name>FlushRx</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Empty the receive buffer</para><para><simplesect kind="return"><para>Current value of status register </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="1079" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="1145" bodyend="1148"/>
        <references refid="classNRF24L01_1ab604b1e177e4812e33ebc39287503197" compoundref="NRF24L01_8cpp" startline="1157" endline="1166">spiTrans</references>
        <references refid="NRF24L01registers_8h_1aaa0ea814597af9ac6b572b4c85212abe" compoundref="NRF24L01registers_8h" startline="122">NRF24L01_CMD_FLUSH_RX</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1a95faa729cb8245516e9eb0248c6d9b0f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t NRF24L01::getStatus</definition>
        <argsstring>(void)</argsstring>
        <name>getStatus</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the current status of the chip</para><para><simplesect kind="return"><para>Current value of status register </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="1086" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="293" bodyend="297"/>
        <references refid="classNRF24L01_1ab604b1e177e4812e33ebc39287503197" compoundref="NRF24L01_8cpp" startline="1157" endline="1166">spiTrans</references>
        <references refid="NRF24L01registers_8h_1a34038777861e0c105a76ec3d46cfd2d9" compoundref="NRF24L01registers_8h" startline="124">NRF24L01_CMD_NOP</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1aceeaa16f91d7c5fd6a429a6adf678bd4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NRF24L01::ToggleFeatures</definition>
        <argsstring>(void)</argsstring>
        <name>ToggleFeatures</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Turn on or off the special features of the chip</para><para>The chip has certain &apos;features&apos; which are only available when the &apos;features&apos; are enabled. See the datasheet for details. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="1093" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="604" bodyend="609"/>
        <references refid="classNRF24L01_1acffaad2c6b5e3713f7fe6af22d4553ef" compoundref="NRF24L01_8h" startline="1002" endline="1002">CSN_LOW</references>
        <references refid="classNRF24L01_1a6321af25fee367445baa6ab4840f8443" compoundref="NRF24L01_8h" startline="989">spi</references>
        <references refid="classSPI_1ad2c97b15ee0417c355a899c28d2efa5d" compoundref="SPI_8cpp" startline="79" endline="83">SPI::WriteReadbyte</references>
        <references refid="NRF24L01registers_8h_1a3959f22104bcca5fdb7411658d2f8312" compoundref="NRF24L01registers_8h" startline="116">NRF24L01_CMD_ACTIVATE</references>
        <references refid="classNRF24L01_1a958fa3e8a0457c0c655b9652ee9dbad4" compoundref="NRF24L01_8h" startline="1001" endline="1001">CSN_HIGH</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1ab604b1e177e4812e33ebc39287503197" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t NRF24L01::spiTrans</definition>
        <argsstring>(uint8_t cmd)</argsstring>
        <name>spiTrans</name>
        <param>
          <type>uint8_t</type>
          <declname>cmd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Built in spi transfer function to simplify repeating code repeating code </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="1099" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="1157" bodyend="1166"/>
        <references refid="classNRF24L01_1acffaad2c6b5e3713f7fe6af22d4553ef" compoundref="NRF24L01_8h" startline="1002" endline="1002">CSN_LOW</references>
        <references refid="classNRF24L01_1a6321af25fee367445baa6ab4840f8443" compoundref="NRF24L01_8h" startline="989">spi</references>
        <references refid="classSPI_1ad2c97b15ee0417c355a899c28d2efa5d" compoundref="SPI_8cpp" startline="79" endline="83">SPI::WriteReadbyte</references>
        <references refid="classNRF24L01_1a958fa3e8a0457c0c655b9652ee9dbad4" compoundref="NRF24L01_8h" startline="1001" endline="1001">CSN_HIGH</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1ad796eb9996a6b528534d1ac2ae2d37cd" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NRF24L01::__attribute__</definition>
        <argsstring>((gnu_inline)) void delay_us(uint16_t delay)</argsstring>
        <name>__attribute__</name>
        <param>
          <type>(gnu_inline)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="1101" column="1" bodyfile="src/Wireless/NRF24L01.h" bodystart="1101" bodyend="1103"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classNRF24L01_1a42ef1a6d858a115327d0a7310aaba57c" prot="private" static="no" mutable="no">
        <type>uint8_t *</type>
        <definition>volatile uint8_t* NRF24L01::NRF24L01_DDR</definition>
        <argsstring></argsstring>
        <name>NRF24L01_DDR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="99" column="1" bodyfile="src/Wireless/NRF24L01.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNRF24L01_1a56a20345fcb667fcfc9bc1cb62d5152f" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t NRF24L01::NRF24L01_CE</definition>
        <argsstring></argsstring>
        <name>NRF24L01_CE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="101" column="1" bodyfile="src/Wireless/NRF24L01.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNRF24L01_1a4d36b61597b9919dd4a0ecdc53526020" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t NRF24L01::NRF24L01_CSN</definition>
        <argsstring></argsstring>
        <name>NRF24L01_CSN</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="102" column="1" bodyfile="src/Wireless/NRF24L01.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNRF24L01_1a4701641c1e8b3d082deb03f93c84d8c7" prot="private" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t NRF24L01::spi_speed</definition>
        <argsstring></argsstring>
        <name>spi_speed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classSPI" kindref="compound">SPI</ref> Bus Speed </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="104" column="1" bodyfile="src/Wireless/NRF24L01.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNRF24L01_1a082a99d802a3f2335da94e67cf8440ea" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool NRF24L01::p_variant</definition>
        <argsstring></argsstring>
        <name>p_variant</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="105" column="1" bodyfile="src/Wireless/NRF24L01.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNRF24L01_1a2f5e84525760899949446db94d225700" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t NRF24L01::NRF24L01_CH</definition>
        <argsstring></argsstring>
        <name>NRF24L01_CH</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="107" column="1" bodyfile="src/Wireless/NRF24L01.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNRF24L01_1a6f035e7c49d8ed5e1ab84242cef0e9be" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t NRF24L01::NRF24L01_PAYLOAD</definition>
        <argsstring></argsstring>
        <name>NRF24L01_PAYLOAD</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="109" column="1" bodyfile="src/Wireless/NRF24L01.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNRF24L01_1af2e0a88f330c86d0cc6c43180f70ecbd" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t NRF24L01::NRF24L01_ACK</definition>
        <argsstring></argsstring>
        <name>NRF24L01_ACK</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="111" column="1" bodyfile="src/Wireless/NRF24L01.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNRF24L01_1a10c710f3795c47ebde120ca3d975c891" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t NRF24L01::NRF24L01_ENABLEDP0</definition>
        <argsstring></argsstring>
        <name>NRF24L01_ENABLEDP0</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="115" column="1" bodyfile="src/Wireless/NRF24L01.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNRF24L01_1a8ebd82a57efbaa5928a56ba6780740de" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t NRF24L01::NRF24L01_ENABLEDP1</definition>
        <argsstring></argsstring>
        <name>NRF24L01_ENABLEDP1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="116" column="1" bodyfile="src/Wireless/NRF24L01.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNRF24L01_1aac40f597790cf3a62b382f919f1293ce" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t NRF24L01::NRF24L01_ENABLEDP2</definition>
        <argsstring></argsstring>
        <name>NRF24L01_ENABLEDP2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="117" column="1" bodyfile="src/Wireless/NRF24L01.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNRF24L01_1aea0d090c7d6da9b137ce4ce3690535e8" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t NRF24L01::NRF24L01_ENABLEDP3</definition>
        <argsstring></argsstring>
        <name>NRF24L01_ENABLEDP3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="118" column="1" bodyfile="src/Wireless/NRF24L01.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNRF24L01_1a4f19e32ed3324724d3478b9f841a2790" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t NRF24L01::NRF24L01_ENABLEDP4</definition>
        <argsstring></argsstring>
        <name>NRF24L01_ENABLEDP4</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="119" column="1" bodyfile="src/Wireless/NRF24L01.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNRF24L01_1ae77cf1829f80c703e36ef57b6d23e9a9" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t NRF24L01::NRF24L01_ENABLEDP5</definition>
        <argsstring></argsstring>
        <name>NRF24L01_ENABLEDP5</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="120" column="1" bodyfile="src/Wireless/NRF24L01.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNRF24L01_1a0b5c60487c6b715b9f17f968f7958d93" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t NRF24L01::NRF24L01_ADDRSIZE</definition>
        <argsstring></argsstring>
        <name>NRF24L01_ADDRSIZE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="123" column="1" bodyfile="src/Wireless/NRF24L01.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNRF24L01_1af836ff0a915587aa40b5eabe4101ea4c" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t NRF24L01::pipe0_reading_address[5]</definition>
        <argsstring>[5]</argsstring>
        <name>pipe0_reading_address</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Last address set on pipe 0 for reading. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="125" column="1" bodyfile="src/Wireless/NRF24L01.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNRF24L01_1ac798ba6ce52fd4a13eb40ff274818157" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t NRF24L01::NRF24L01_RF24_PA</definition>
        <argsstring></argsstring>
        <name>NRF24L01_RF24_PA</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="136" column="1" bodyfile="src/Wireless/NRF24L01.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNRF24L01_1a2dc0073a56f6aca86da205dd720fd132" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t NRF24L01::NRF24L01_RF24_SPEED</definition>
        <argsstring></argsstring>
        <name>NRF24L01_RF24_SPEED</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="139" column="1" bodyfile="src/Wireless/NRF24L01.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNRF24L01_1af6a260dd55ee5c2f7de7cfac4e91178d" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t NRF24L01::NRF24L01_RF24_CRC</definition>
        <argsstring></argsstring>
        <name>NRF24L01_RF24_CRC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="143" column="1" bodyfile="src/Wireless/NRF24L01.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNRF24L01_1ae319d1b6a3d950888d2608cc69efb07c" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool NRF24L01::dynamic_payloads_enabled</definition>
        <argsstring></argsstring>
        <name>dynamic_payloads_enabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether dynamic payloads are enabled. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="145" column="1" bodyfile="src/Wireless/NRF24L01.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classNRF24L01_1ad3e6263e0afaa974637d1450b6c8cb37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>NRF24L01::NRF24L01</definition>
        <argsstring>()</argsstring>
        <name>NRF24L01</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="149" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="37" bodyend="97"/>
        <references refid="classNRF24L01_1a42ef1a6d858a115327d0a7310aaba57c" compoundref="NRF24L01_8h" startline="99">NRF24L01_DDR</references>
        <references refid="classNRF24L01_1a56a20345fcb667fcfc9bc1cb62d5152f" compoundref="NRF24L01_8h" startline="101">NRF24L01_CE</references>
        <references refid="classNRF24L01_1a4d36b61597b9919dd4a0ecdc53526020" compoundref="NRF24L01_8h" startline="102">NRF24L01_CSN</references>
        <references refid="classNRF24L01_1aa8eaf9d5ed604f60a00cd79fed9edad7" compoundref="NRF24L01_8cpp" startline="299" endline="303">setChannel</references>
        <references refid="classNRF24L01_1abe5983a57d0d3bd77508e5345774c890" compoundref="NRF24L01_8cpp" startline="309" endline="311">setPayloadSize</references>
        <references refid="classNRF24L01_1a33b1c7dd1cad95dae57ef87bf3dce5c8" compoundref="NRF24L01_8cpp" startline="699" endline="704">setAutoAck</references>
        <references refid="classNRF24L01_1a0b5c60487c6b715b9f17f968f7958d93" compoundref="NRF24L01_8h" startline="123">NRF24L01_ADDRSIZE</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1a8e2cc2ca751ff3bd4ea351bd2fcea93e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>NRF24L01::NRF24L01</definition>
        <argsstring>(volatile uint8_t &amp;DDR, volatile uint8_t &amp;PORT, uint8_t CE, uint8_t CSN)</argsstring>
        <name>NRF24L01</name>
        <param>
          <type>volatile uint8_t &amp;</type>
          <declname>DDR</declname>
        </param>
        <param>
          <type>volatile uint8_t &amp;</type>
          <declname>PORT</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>CE</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>CSN</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="151" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="99" bodyend="157"/>
        <references refid="classNRF24L01_1a42ef1a6d858a115327d0a7310aaba57c" compoundref="NRF24L01_8h" startline="99">NRF24L01_DDR</references>
        <references refid="classNRF24L01_1a56a20345fcb667fcfc9bc1cb62d5152f" compoundref="NRF24L01_8h" startline="101">NRF24L01_CE</references>
        <references refid="main_8cpp_1af332f65aca07c44deeda884c8f6c353c" compoundref="main_8cpp" startline="45">CE</references>
        <references refid="classNRF24L01_1a4d36b61597b9919dd4a0ecdc53526020" compoundref="NRF24L01_8h" startline="102">NRF24L01_CSN</references>
        <references refid="main_8cpp_1a8df4f3a8a2035df063402ae5f0c1d2f8" compoundref="main_8cpp" startline="46">CSN</references>
        <references refid="classNRF24L01_1a1feaab910ecff17805f8141fe40028e7" compoundref="NRF24L01_8h" startline="905">txDelay</references>
        <references refid="classNRF24L01_1a4701641c1e8b3d082deb03f93c84d8c7" compoundref="NRF24L01_8h" startline="104">spi_speed</references>
        <references refid="classNRF24L01_1a749f38c45c00905b3d8e8c180626bff6" compoundref="NRF24L01_8h" startline="659">failureDetected</references>
        <references refid="classNRF24L01_1a2f5e84525760899949446db94d225700" compoundref="NRF24L01_8h" startline="107">NRF24L01_CH</references>
        <references refid="classNRF24L01_1a6f035e7c49d8ed5e1ab84242cef0e9be" compoundref="NRF24L01_8h" startline="109">NRF24L01_PAYLOAD</references>
        <references refid="classNRF24L01_1af2e0a88f330c86d0cc6c43180f70ecbd" compoundref="NRF24L01_8h" startline="111">NRF24L01_ACK</references>
        <references refid="classNRF24L01_1ae319d1b6a3d950888d2608cc69efb07c" compoundref="NRF24L01_8h" startline="145">dynamic_payloads_enabled</references>
        <references refid="classNRF24L01_1a10c710f3795c47ebde120ca3d975c891" compoundref="NRF24L01_8h" startline="115">NRF24L01_ENABLEDP0</references>
        <references refid="classNRF24L01_1a8ebd82a57efbaa5928a56ba6780740de" compoundref="NRF24L01_8h" startline="116">NRF24L01_ENABLEDP1</references>
        <references refid="classNRF24L01_1aac40f597790cf3a62b382f919f1293ce" compoundref="NRF24L01_8h" startline="117">NRF24L01_ENABLEDP2</references>
        <references refid="classNRF24L01_1aea0d090c7d6da9b137ce4ce3690535e8" compoundref="NRF24L01_8h" startline="118">NRF24L01_ENABLEDP3</references>
        <references refid="classNRF24L01_1a4f19e32ed3324724d3478b9f841a2790" compoundref="NRF24L01_8h" startline="119">NRF24L01_ENABLEDP4</references>
        <references refid="classNRF24L01_1ae77cf1829f80c703e36ef57b6d23e9a9" compoundref="NRF24L01_8h" startline="120">NRF24L01_ENABLEDP5</references>
        <references refid="classNRF24L01_1a0b5c60487c6b715b9f17f968f7958d93" compoundref="NRF24L01_8h" startline="123">NRF24L01_ADDRSIZE</references>
        <references refid="classNRF24L01_1ac798ba6ce52fd4a13eb40ff274818157" compoundref="NRF24L01_8h" startline="136">NRF24L01_RF24_PA</references>
        <references refid="NRF24L01_8h_1ac7a035ce38201de0975b1cd23851b9c7" compoundref="NRF24L01_8h" startline="42">NRF24L01_RF24_PA_MIN</references>
        <references refid="classNRF24L01_1a2dc0073a56f6aca86da205dd720fd132" compoundref="NRF24L01_8h" startline="139">NRF24L01_RF24_SPEED</references>
        <references refid="NRF24L01_8h_1aa0d7169d75941f10e4187369c6d99ae2" compoundref="NRF24L01_8h" startline="50">NRF24L01_RF24_SPEED_1MBPS</references>
        <references refid="classNRF24L01_1af6a260dd55ee5c2f7de7cfac4e91178d" compoundref="NRF24L01_8h" startline="143">NRF24L01_RF24_CRC</references>
        <references refid="NRF24L01_8h_1a7efcb38c0a6cfe8b7b32c777b5e45c3f" compoundref="NRF24L01_8h" startline="57">NRF24L01_RF24_CRC_16</references>
        <references refid="classNRF24L01_1af836ff0a915587aa40b5eabe4101ea4c" compoundref="NRF24L01_8h" startline="125">pipe0_reading_address</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1a2973773d1a158e1cfbf52198f248c548" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NRF24L01::Init</definition>
        <argsstring>()</argsstring>
        <name>Init</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Begin operation of the chip</para><para>Call this in setup(), before calling any other methods. <programlisting><codeline><highlight class="normal">radio.Init()<sp/></highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="159" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="159" bodyend="218"/>
        <references refid="classNRF24L01_1a42ef1a6d858a115327d0a7310aaba57c" compoundref="NRF24L01_8h" startline="99">NRF24L01_DDR</references>
        <references refid="classNRF24L01_1a4d36b61597b9919dd4a0ecdc53526020" compoundref="NRF24L01_8h" startline="102">NRF24L01_CSN</references>
        <references refid="classNRF24L01_1a56a20345fcb667fcfc9bc1cb62d5152f" compoundref="NRF24L01_8h" startline="101">NRF24L01_CE</references>
        <references refid="classNRF24L01_1a6321af25fee367445baa6ab4840f8443" compoundref="NRF24L01_8h" startline="989">spi</references>
        <references refid="classSPI_1a7e28e3328e32b650ead0f7640cee6e81" compoundref="SPI_8cpp" startline="61" endline="77">SPI::Init</references>
        <references refid="classNRF24L01_1aa5e261363986c590c90e7cb2adc2d75d" compoundref="NRF24L01_8h" startline="1004" endline="1004">CE_LOW</references>
        <references refid="classNRF24L01_1a958fa3e8a0457c0c655b9652ee9dbad4" compoundref="NRF24L01_8h" startline="1001" endline="1001">CSN_HIGH</references>
        <references refid="classNRF24L01_1abfaaa54aff7ce60c4c844dd540c47af5" compoundref="NRF24L01_8cpp" startline="1081" endline="1088">WriteRegister</references>
        <references refid="NRF24L01registers_8h_1a71b3597b405d855e19ef435a215edacc" compoundref="NRF24L01registers_8h" startline="31">NRF24L01_REG_CONFIG</references>
        <references refid="classNRF24L01_1a0bb209d94b62e2a28af53179af713f3c" compoundref="NRF24L01_8cpp" startline="836" endline="838">setRetries</references>
        <references refid="classNRF24L01_1a7319961d6048e32546ad5df934bd42d8" compoundref="NRF24L01_8cpp" startline="726" endline="738">setPALevel</references>
        <references refid="NRF24L01_8h_1a1e4cd0bea93e6b43422855fb0120aaceab0bfc94c4095e9495b2e49530b623d0d" compoundref="NRF24L01_8h" startline="75">RF24_PA_MAX</references>
        <references refid="classNRF24L01_1a9db0803c6d87e6ada7febea2240a7b1c" compoundref="NRF24L01_8cpp" startline="745" endline="778">setDataRate</references>
        <references refid="NRF24L01_8h_1a82745de4aa1251b7561564b3ed1d6522ad6a241689903e120c99b6963cb98c97c" compoundref="NRF24L01_8h" startline="82">RF24_250KBPS</references>
        <references refid="classNRF24L01_1a082a99d802a3f2335da94e67cf8440ea" compoundref="NRF24L01_8h" startline="105">p_variant</references>
        <references refid="classNRF24L01_1a6fc7da02296e9f91908e89438ba67901" compoundref="NRF24L01_8cpp" startline="1056" endline="1064">ReadRegister</references>
        <references refid="NRF24L01registers_8h_1a7344c4ea38d1f2296b9163c02e17bd8d" compoundref="NRF24L01registers_8h" startline="37">NRF24L01_REG_RF_SETUP</references>
        <references refid="NRF24L01_8h_1a82745de4aa1251b7561564b3ed1d6522afd01f3fd55247a67c0bcfd459fe17fdf" compoundref="NRF24L01_8h" startline="82">RF24_1MBPS</references>
        <references refid="classNRF24L01_1aceeaa16f91d7c5fd6a429a6adf678bd4" compoundref="NRF24L01_8cpp" startline="604" endline="609">ToggleFeatures</references>
        <references refid="NRF24L01registers_8h_1a0819cc8bd7ced28454f1753db8151e81" compoundref="NRF24L01registers_8h" startline="55">NRF24L01_REG_FEATURE</references>
        <references refid="NRF24L01registers_8h_1a7be01f5b9fe0d16b38e4957419229a64" compoundref="NRF24L01registers_8h" startline="56">NRF24L01_REG_DYNPD</references>
        <references refid="classNRF24L01_1ae319d1b6a3d950888d2608cc69efb07c" compoundref="NRF24L01_8h" startline="145">dynamic_payloads_enabled</references>
        <references refid="NRF24L01registers_8h_1a0eacea6f02e36fcc6045a073b9cf12a0" compoundref="NRF24L01registers_8h" startline="38">NRF24L01_REG_STATUS</references>
        <references refid="NRF24L01registers_8h_1ab600bb73d205bb30ee182bbdd0fe96c0" compoundref="NRF24L01registers_8h" startline="59">NRF24L01_REG_MASK_RX_DR</references>
        <references refid="NRF24L01registers_8h_1a2e080fce62016b92e7d42519e17e1259" compoundref="NRF24L01registers_8h" startline="60">NRF24L01_REG_MASK_TX_DS</references>
        <references refid="NRF24L01registers_8h_1ac16635ddd6f66d55990cfc526dedbc1a" compoundref="NRF24L01registers_8h" startline="61">NRF24L01_REG_MASK_MAX_RT</references>
        <references refid="classNRF24L01_1aa8eaf9d5ed604f60a00cd79fed9edad7" compoundref="NRF24L01_8cpp" startline="299" endline="303">setChannel</references>
        <references refid="classNRF24L01_1a83cfc941bafe563f38e183504ee8533c" compoundref="NRF24L01_8cpp" startline="1145" endline="1148">FlushRx</references>
        <references refid="classNRF24L01_1ab40eeb5ca2337c5f15992f29ee3b5b18" compoundref="NRF24L01_8cpp" startline="1150" endline="1154">FlushTx</references>
        <references refid="classNRF24L01_1a8e184a0a6ca30fbae69c1331a567deda" compoundref="NRF24L01_8cpp" startline="275" endline="288">powerUp</references>
        <references refid="NRF24L01registers_8h_1aad6c994677c334acb830274b1d955495" compoundref="NRF24L01registers_8h" startline="65">NRF24L01_REG_PRIM_RX</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1aaabd39829998b609c0dc317af4f141b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NRF24L01::startListening</definition>
        <argsstring>()</argsstring>
        <name>startListening</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Start listening on the pipes opened for reading.</para><para><orderedlist>
<listitem><para>Be sure to call <ref refid="classNRF24L01_1a9b458f77f6ae6c42f330710e703dd847" kindref="member">openReadingPipe()</ref> first.</para></listitem><listitem><para>Do not call <ref refid="classNRF24L01_1a719390c69a2e45df08379f17e3289f4c" kindref="member">write()</ref> while in this mode, without first calling <ref refid="classNRF24L01_1a6ad13189b732f237ac148c659ddf6b01" kindref="member">stopListening()</ref>.</para></listitem><listitem><para>Call <ref refid="classNRF24L01_1ab368039cf5448f0ff5d489563d530c7b" kindref="member">available()</ref> to check for incoming traffic, and <ref refid="classNRF24L01_1a60ed6c6e072a1f41ca560546745ec6da" kindref="member">read()</ref> to get it.</para></listitem></orderedlist>
</para><para><programlisting><codeline><highlight class="normal">Open<sp/>reading<sp/>pipe<sp/>1<sp/>using<sp/>address<sp/>CCCECCCECC</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">byte<sp/>address[]<sp/>=<sp/>{<sp/>0xCC,0xCE,0xCC,0xCE,0xCC<sp/>};</highlight></codeline>
<codeline><highlight class="normal">radio.openReadingPipe(1,address);</highlight></codeline>
<codeline><highlight class="normal">radio.startListening();</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="175" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="220" bodyend="242"/>
        <references refid="classNRF24L01_1a8e184a0a6ca30fbae69c1331a567deda" compoundref="NRF24L01_8cpp" startline="275" endline="288">powerUp</references>
        <references refid="classNRF24L01_1abfaaa54aff7ce60c4c844dd540c47af5" compoundref="NRF24L01_8cpp" startline="1081" endline="1088">WriteRegister</references>
        <references refid="NRF24L01registers_8h_1a71b3597b405d855e19ef435a215edacc" compoundref="NRF24L01registers_8h" startline="31">NRF24L01_REG_CONFIG</references>
        <references refid="classNRF24L01_1a6fc7da02296e9f91908e89438ba67901" compoundref="NRF24L01_8cpp" startline="1056" endline="1064">ReadRegister</references>
        <references refid="NRF24L01registers_8h_1aad6c994677c334acb830274b1d955495" compoundref="NRF24L01registers_8h" startline="65">NRF24L01_REG_PRIM_RX</references>
        <references refid="NRF24L01registers_8h_1a0eacea6f02e36fcc6045a073b9cf12a0" compoundref="NRF24L01registers_8h" startline="38">NRF24L01_REG_STATUS</references>
        <references refid="NRF24L01registers_8h_1ab600bb73d205bb30ee182bbdd0fe96c0" compoundref="NRF24L01registers_8h" startline="59">NRF24L01_REG_MASK_RX_DR</references>
        <references refid="NRF24L01registers_8h_1a2e080fce62016b92e7d42519e17e1259" compoundref="NRF24L01registers_8h" startline="60">NRF24L01_REG_MASK_TX_DS</references>
        <references refid="NRF24L01registers_8h_1ac16635ddd6f66d55990cfc526dedbc1a" compoundref="NRF24L01registers_8h" startline="61">NRF24L01_REG_MASK_MAX_RT</references>
        <references refid="classNRF24L01_1a85274c10cbe6317796a209913bfb0253" compoundref="NRF24L01_8h" startline="1003" endline="1003">CE_HIGH</references>
        <references refid="classNRF24L01_1af836ff0a915587aa40b5eabe4101ea4c" compoundref="NRF24L01_8h" startline="125">pipe0_reading_address</references>
        <references refid="classNRF24L01_1ac7d69c51eca87f16fa3a30b5e8aa85cb" compoundref="NRF24L01_8cpp" startline="1091" endline="1100">WriteRegisters</references>
        <references refid="NRF24L01registers_8h_1afcaaf2d19fb6b9ebd0b122d173c13b88" compoundref="NRF24L01registers_8h" startline="41">NRF24L01_REG_RX_ADDR_P0</references>
        <references refid="classNRF24L01_1a0b5c60487c6b715b9f17f968f7958d93" compoundref="NRF24L01_8h" startline="123">NRF24L01_ADDRSIZE</references>
        <references refid="classNRF24L01_1a7214eaa3fcd3b6576d8f290e6ab71955" compoundref="NRF24L01_8cpp" startline="599" endline="601">closeReadingPipe</references>
        <references refid="NRF24L01registers_8h_1a0819cc8bd7ced28454f1753db8151e81" compoundref="NRF24L01registers_8h" startline="55">NRF24L01_REG_FEATURE</references>
        <references refid="NRF24L01registers_8h_1a4dc0921a9e237248b4f6d51b09832a2b" compoundref="NRF24L01registers_8h" startline="32">NRF24L01_REG_EN_AA</references>
        <references refid="classNRF24L01_1ab40eeb5ca2337c5f15992f29ee3b5b18" compoundref="NRF24L01_8cpp" startline="1150" endline="1154">FlushTx</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1a6ad13189b732f237ac148c659ddf6b01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NRF24L01::stopListening</definition>
        <argsstring>()</argsstring>
        <name>stopListening</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Stop listening for incoming messages, and switch to transmit mode.</para><para>Do this before calling <ref refid="classNRF24L01_1a719390c69a2e45df08379f17e3289f4c" kindref="member">write()</ref>. <programlisting><codeline><highlight class="normal">radio.stopListening();</highlight></codeline>
<codeline><highlight class="normal">radio.write(&amp;data,sizeof(data));</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="185" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="247" bodyend="264"/>
        <references refid="classNRF24L01_1aa5e261363986c590c90e7cb2adc2d75d" compoundref="NRF24L01_8h" startline="1004" endline="1004">CE_LOW</references>
        <references refid="classNRF24L01_1a1feaab910ecff17805f8141fe40028e7" compoundref="NRF24L01_8h" startline="905">txDelay</references>
        <references refid="classNRF24L01_1a6fc7da02296e9f91908e89438ba67901" compoundref="NRF24L01_8cpp" startline="1056" endline="1064">ReadRegister</references>
        <references refid="NRF24L01registers_8h_1a0819cc8bd7ced28454f1753db8151e81" compoundref="NRF24L01registers_8h" startline="55">NRF24L01_REG_FEATURE</references>
        <references refid="NRF24L01registers_8h_1a4dc0921a9e237248b4f6d51b09832a2b" compoundref="NRF24L01registers_8h" startline="32">NRF24L01_REG_EN_AA</references>
        <references refid="classNRF24L01_1ab40eeb5ca2337c5f15992f29ee3b5b18" compoundref="NRF24L01_8cpp" startline="1150" endline="1154">FlushTx</references>
        <references refid="classNRF24L01_1abfaaa54aff7ce60c4c844dd540c47af5" compoundref="NRF24L01_8cpp" startline="1081" endline="1088">WriteRegister</references>
        <references refid="NRF24L01registers_8h_1a71b3597b405d855e19ef435a215edacc" compoundref="NRF24L01registers_8h" startline="31">NRF24L01_REG_CONFIG</references>
        <references refid="NRF24L01registers_8h_1aad6c994677c334acb830274b1d955495" compoundref="NRF24L01registers_8h" startline="65">NRF24L01_REG_PRIM_RX</references>
        <references refid="NRF24L01registers_8h_1a1ece6e2d8eda4cbda7576562213fe72a" compoundref="NRF24L01registers_8h" startline="33">NRF24L01_REG_EN_RXADDR</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1ab368039cf5448f0ff5d489563d530c7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NRF24L01::available</definition>
        <argsstring>()</argsstring>
        <name>available</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check whether there are bytes available to be read <programlisting><codeline><highlight class="normal">if(radio.available()){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>radio.read(&amp;data,sizeof(data));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <simplesect kind="return"><para>True if there is a payload available, false if none is </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="195" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="1035" bodyend="1037"/>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1a60ed6c6e072a1f41ca560546745ec6da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NRF24L01::read</definition>
        <argsstring>(void *buf, uint8_t len)</argsstring>
        <name>read</name>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read the available payload</para><para>The size of data read is the fixed payload size, see <ref refid="classNRF24L01_1a4a7f48ca92e14baabd8be1c0831e8c2f" kindref="member">getPayloadSize()</ref> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a buffer where the data should be written </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of bytes to read into the buffer</para></parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">if(radio.available()){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>radio.read(&amp;data,sizeof(data));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <simplesect kind="return"><para>No return value. Use <ref refid="classNRF24L01_1ab368039cf5448f0ff5d489563d530c7b" kindref="member">available()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="210" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="685" bodyend="693"/>
        <references refid="classNRF24L01_1ad733911b261f73964817dad526745716" compoundref="NRF24L01_8cpp" startline="1123" endline="1141">ReadPayload</references>
        <references refid="classNRF24L01_1abfaaa54aff7ce60c4c844dd540c47af5" compoundref="NRF24L01_8cpp" startline="1081" endline="1088">WriteRegister</references>
        <references refid="NRF24L01registers_8h_1a0eacea6f02e36fcc6045a073b9cf12a0" compoundref="NRF24L01registers_8h" startline="38">NRF24L01_REG_STATUS</references>
        <references refid="NRF24L01registers_8h_1acb501a3032174ca687b876d73858bed1" compoundref="NRF24L01registers_8h" startline="85">NRF24L01_REG_RX_DR</references>
        <references refid="NRF24L01registers_8h_1ace17aac70424ae1d91ac38290a85ae86" compoundref="NRF24L01registers_8h" startline="87">NRF24L01_REG_MAX_RT</references>
        <references refid="NRF24L01registers_8h_1a42b5b404cde7ad0b3917d65caeea9b91" compoundref="NRF24L01registers_8h" startline="86">NRF24L01_REG_TX_DS</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1a719390c69a2e45df08379f17e3289f4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NRF24L01::write</definition>
        <argsstring>(const void *buf, uint8_t len)</argsstring>
        <name>write</name>
        <param>
          <type>const void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Be sure to call <ref refid="classNRF24L01_1ad64a887cae746be5ca43cf08445feed9" kindref="member">openWritingPipe()</ref> first to set the destination of where to write to.</para><para>This blocks until the message is successfully acknowledged by the receiver or the timeout/retransmit maxima are reached. In the current configuration, the max delay here is 60-70ms.</para><para>The maximum size of data written is the fixed payload size, see <ref refid="classNRF24L01_1a4a7f48ca92e14baabd8be1c0831e8c2f" kindref="member">getPayloadSize()</ref>. However, you can write less, and the remainder will just be filled with zeroes.</para><para>TX/RX/RT interrupt flags will be cleared every time write is called</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to be sent </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to be sent</para></parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">radio.stopListening();</highlight></codeline>
<codeline><highlight class="normal">radio.write(&amp;data,sizeof(data));</highlight></codeline>
</programlisting> <simplesect kind="return"><para>True if the payload was delivered successfully false if not </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="234" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="866" bodyend="868"/>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1ad64a887cae746be5ca43cf08445feed9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NRF24L01::openWritingPipe</definition>
        <argsstring>(const uint8_t *address)</argsstring>
        <name>openWritingPipe</name>
        <param>
          <type>const uint8_t *</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>New: Open a pipe for writing via byte array. Old addressing format retained for compatibility.</para><para>Only one writing pipe can be open at once, but you can change the address you&apos;ll write to. Call <ref refid="classNRF24L01_1a6ad13189b732f237ac148c659ddf6b01" kindref="member">stopListening()</ref> first.</para><para>Addresses are assigned via a byte array, default is 5 byte address lengths</para><para><programlisting><codeline><highlight class="normal">uint8_t<sp/>addresses[][6]<sp/>=<sp/>{&quot;1Node&quot;,&quot;2Node&quot;};</highlight></codeline>
<codeline><highlight class="normal">radio.openWritingPipe(addresses[0]);</highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">uint8_t<sp/>address[]<sp/>=<sp/>{<sp/>0xCC,0xCE,0xCC,0xCE,0xCC<sp/>};</highlight></codeline>
<codeline><highlight class="normal">radio.openWritingPipe(address);</highlight></codeline>
<codeline><highlight class="normal">address[0]<sp/>=<sp/>0x33;</highlight></codeline>
<codeline><highlight class="normal">radio.openReadingPipe(1,address);</highlight></codeline>
</programlisting> <simplesect kind="see"><para><ref refid="classNRF24L01_1a17752733515f67aa9f6ed3daa1ed3d1d" kindref="member">setAddressWidth</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the pipe to open. Coordinate these pipe addresses amongst nodes on the network. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="259" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="503" bodyend="514"/>
        <references refid="classNRF24L01_1ac7d69c51eca87f16fa3a30b5e8aa85cb" compoundref="NRF24L01_8cpp" startline="1091" endline="1100">WriteRegisters</references>
        <references refid="NRF24L01registers_8h_1afcaaf2d19fb6b9ebd0b122d173c13b88" compoundref="NRF24L01registers_8h" startline="41">NRF24L01_REG_RX_ADDR_P0</references>
        <references refid="classNRF24L01_1a0b5c60487c6b715b9f17f968f7958d93" compoundref="NRF24L01_8h" startline="123">NRF24L01_ADDRSIZE</references>
        <references refid="NRF24L01registers_8h_1abbc9a49c2fa8649b95faaca41dda30a0" compoundref="NRF24L01registers_8h" startline="47">NRF24L01_REG_TX_ADDR</references>
        <references refid="classNRF24L01_1abfaaa54aff7ce60c4c844dd540c47af5" compoundref="NRF24L01_8cpp" startline="1081" endline="1088">WriteRegister</references>
        <references refid="NRF24L01registers_8h_1ae87408247e1b981750056d2b07817982" compoundref="NRF24L01registers_8h" startline="48">NRF24L01_REG_RX_PW_P0</references>
        <references refid="classNRF24L01_1a6f035e7c49d8ed5e1ab84242cef0e9be" compoundref="NRF24L01_8h" startline="109">NRF24L01_PAYLOAD</references>
      </memberdef>
      <memberdef kind="function" id="classNRF24L01_1a9b458f77f6ae6c42f330710e703dd847" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NRF24L01::openReadingPipe</definition>
        <argsstring>(uint8_t number, const uint8_t *address)</argsstring>
        <name>openReadingPipe</name>
        <param>
          <type>uint8_t</type>
          <declname>number</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Open a pipe for reading</para><para>Up to 6 pipes can be open for reading at once. Open all the required reading pipes, and then call <ref refid="classNRF24L01_1aaabd39829998b609c0dc317af4f141b2" kindref="member">startListening()</ref>.</para><para><simplesect kind="see"><para><ref refid="classNRF24L01_1ad64a887cae746be5ca43cf08445feed9" kindref="member">openWritingPipe</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="classNRF24L01_1a17752733515f67aa9f6ed3daa1ed3d1d" kindref="member">setAddressWidth</ref></para></simplesect>
<simplesect kind="note"><para>Pipes 0 and 1 will store a full 5-byte address. Pipes 2-5 will technically only store a single byte, borrowing up to 4 additional bytes from pipe #1 per the assigned address width. </para></simplesect>
<simplesect kind="warning"><para>Pipes 1-5 should share the same address, except the first byte. Only the first byte in the array should be unique, e.g. <programlisting><codeline><highlight class="normal">uint8_t<sp/>addresses[][6]<sp/>=<sp/>{&quot;1Node&quot;,&quot;2Node&quot;};</highlight></codeline>
<codeline><highlight class="normal">openReadingPipe(1,addresses[0]);</highlight></codeline>
<codeline><highlight class="normal">openReadingPipe(2,addresses[1]);</highlight></codeline>
</programlisting></para></simplesect>
<simplesect kind="warning"><para>Pipe 0 is also used by the writing pipe. So if you open pipe 0 for reading, and then <ref refid="classNRF24L01_1aaabd39829998b609c0dc317af4f141b2" kindref="member">startListening()</ref>, it will overwrite the writing pipe. Ergo, do an <ref refid="classNRF24L01_1ad64a887cae746be5ca43cf08445feed9" kindref="member">openWritingPipe()</ref> again before <ref refid="classNRF24L01_1a719390c69a2e45df08379f17e3289f4c" kindref="member">write()</ref>.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>number</parametername>
</parameternamelist>
<parameterdescription>
<para>Which pipe# to open, 0-5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>The 24, 32 or 40 bit address of the pipe to open. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Wireless/NRF24L01.h" line="287" column="1" bodyfile="src/Wireless/NRF24L01.cpp" bodystart="552" bodyend="574"/>
        <references refid="classNRF24L01_1af836ff0a915587aa40b5eabe4101ea4c" compoundref="NRF24L01_8h" startline="125">pipe0_reading_address</references>
        <references refid="classNRF24L01_1a0b5c60487c6b715b9f17f968f7958d93" compoundref="NRF24L01_8h" startline="123">NRF24L01_ADDRSIZE</references>
        <references refid="classNRF24L01_1ac7d69c51eca87f16fa3a30b5e8aa85cb" compoundref="NRF24L01_8cpp" startline="1091" endline="1100">WriteRegisters</references>
        <references refid="NRF24L01_8cpp_1abb559312d5695b2e999a6f9c1c70f43e" compoundref="NRF24L01_8cpp" startline="531">child_pipe</references>
        <references refid="classNRF24L01_1abfaaa54aff7ce60c4c844dd540c47af5" compoundref="NRF24L01_8cpp" startline="1081" endline="1088">WriteRegister</references>
        <references refid="NRF24L01_8cpp_1a7f2a8ffadcb84a16a11236e320dec823" compoundref="NRF24L01_8cpp" startline="535">child_payload_size</references>
        <references refid="classNRF24L01_1a6f035e7c49d8ed5e1ab84242cef0e9be" compoundref="NRF24L01_8h" startline="109">NRF24L01_PAYLOAD</references>
        <references refid="NRF24L01registers_8h_1a1ece6e2d8eda4cbda7576562213fe72a" compoundref="NRF24L01registers_8h" startline="33">NRF24L01_REG_EN_RXADDR</references>
        <references refid="classNRF24L01_1a6fc7da02296e9f91908e89438ba67901" compoundref="NRF24L01_8cpp" startline="1056" endline="1064">ReadRegister</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Driver for nRF24L01(+) 2.4GHz Wireless Transceiver </para>    </detaileddescription>
    <collaborationgraph>
      <node id="24">
        <label>NRF24L01</label>
        <link refid="classNRF24L01"/>
        <childnode refid="25" relation="usage">
          <edgelabel>spi</edgelabel>
        </childnode>
      </node>
      <node id="25">
        <label>SPI</label>
        <link refid="classSPI"/>
      </node>
    </collaborationgraph>
    <location file="src/Wireless/NRF24L01.h" line="95" column="1" bodyfile="src/Wireless/NRF24L01.h" bodystart="95" bodyend="1108"/>
    <listofallmembers>
      <member refid="classNRF24L01_1ad796eb9996a6b528534d1ac2ae2d37cd" prot="private" virt="non-virtual"><scope>NRF24L01</scope><name>__attribute__</name></member>
      <member refid="classNRF24L01_1ab368039cf5448f0ff5d489563d530c7b" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>available</name></member>
      <member refid="classNRF24L01_1a6bfbb693418e2d60556637b6a3599d05" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>available</name></member>
      <member refid="classNRF24L01_1a85274c10cbe6317796a209913bfb0253" prot="private" virt="non-virtual"><scope>NRF24L01</scope><name>CE_HIGH</name></member>
      <member refid="classNRF24L01_1aa5e261363986c590c90e7cb2adc2d75d" prot="private" virt="non-virtual"><scope>NRF24L01</scope><name>CE_LOW</name></member>
      <member refid="classNRF24L01_1a7214eaa3fcd3b6576d8f290e6ab71955" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>closeReadingPipe</name></member>
      <member refid="classNRF24L01_1abae8b8afbf747344006d6163c607be00" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>csDelay</name></member>
      <member refid="classNRF24L01_1a958fa3e8a0457c0c655b9652ee9dbad4" prot="private" virt="non-virtual"><scope>NRF24L01</scope><name>CSN_HIGH</name></member>
      <member refid="classNRF24L01_1acffaad2c6b5e3713f7fe6af22d4553ef" prot="private" virt="non-virtual"><scope>NRF24L01</scope><name>CSN_LOW</name></member>
      <member refid="classNRF24L01_1ad311ef5130c99ab8ddca292adfe76603" prot="private" virt="non-virtual"><scope>NRF24L01</scope><name>delay_ms</name></member>
      <member refid="classNRF24L01_1a1e997f3c946acdbe8bd622e431f80034" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>disableCRC</name></member>
      <member refid="classNRF24L01_1abf6bf0c18b2b12674cfbc150a2bdb778" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>disableDynamicPayloads</name></member>
      <member refid="classNRF24L01_1ae319d1b6a3d950888d2608cc69efb07c" prot="private" virt="non-virtual"><scope>NRF24L01</scope><name>dynamic_payloads_enabled</name></member>
      <member refid="classNRF24L01_1ae4067455572c6731211315b3900f5cbd" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>enableAckPayload</name></member>
      <member refid="classNRF24L01_1aeaa968ea74bfd2690fff331e9f115344" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>enableDynamicAck</name></member>
      <member refid="classNRF24L01_1abd060c4df7efac781ed5812a0ee19d08" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>enableDynamicPayloads</name></member>
      <member refid="classNRF24L01_1a749f38c45c00905b3d8e8c180626bff6" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>failureDetected</name></member>
      <member refid="classNRF24L01_1a83cfc941bafe563f38e183504ee8533c" prot="private" virt="non-virtual"><scope>NRF24L01</scope><name>FlushRx</name></member>
      <member refid="classNRF24L01_1ab40eeb5ca2337c5f15992f29ee3b5b18" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>FlushTx</name></member>
      <member refid="classNRF24L01_1a6b269b519d57d54d0682a29ce9036b12" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>getChannel</name></member>
      <member refid="classNRF24L01_1ac83fb86df156475aeda2ef637078fcd3" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>getCRCLength</name></member>
      <member refid="classNRF24L01_1a6184de85c94400cde96b7f83b316efa8" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>getDataRate</name></member>
      <member refid="classNRF24L01_1a0d0cd5dd09d60e06280f378166725d64" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>getDynamicPayloadSize</name></member>
      <member refid="classNRF24L01_1a8fdb80b79100186afad90d9a2a5c79fb" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>getPALevel</name></member>
      <member refid="classNRF24L01_1a4a7f48ca92e14baabd8be1c0831e8c2f" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>getPayloadSize</name></member>
      <member refid="classNRF24L01_1a95faa729cb8245516e9eb0248c6d9b0f" prot="private" virt="non-virtual"><scope>NRF24L01</scope><name>getStatus</name></member>
      <member refid="classNRF24L01_1a2973773d1a158e1cfbf52198f248c548" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>Init</name></member>
      <member refid="classNRF24L01_1a99aae87d62d5097447305d66a0b3281d" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>isAckPayloadAvailable</name></member>
      <member refid="classNRF24L01_1ad05024c9586c1dc76c2fd95d54ce6b4c" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>isPVariant</name></member>
      <member refid="classNRF24L01_1aaddabe35ed60f03a2fb2fb475a3cafb5" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>isValid</name></member>
      <member refid="classNRF24L01_1ad23d4111c3a26d18db51eb72a5491dbb" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>maskIRQ</name></member>
      <member refid="classNRF24L01_1ad3e6263e0afaa974637d1450b6c8cb37" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>NRF24L01</name></member>
      <member refid="classNRF24L01_1a8e2cc2ca751ff3bd4ea351bd2fcea93e" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>NRF24L01</name></member>
      <member refid="classNRF24L01_1af2e0a88f330c86d0cc6c43180f70ecbd" prot="private" virt="non-virtual"><scope>NRF24L01</scope><name>NRF24L01_ACK</name></member>
      <member refid="classNRF24L01_1a0b5c60487c6b715b9f17f968f7958d93" prot="private" virt="non-virtual"><scope>NRF24L01</scope><name>NRF24L01_ADDRSIZE</name></member>
      <member refid="classNRF24L01_1a56a20345fcb667fcfc9bc1cb62d5152f" prot="private" virt="non-virtual"><scope>NRF24L01</scope><name>NRF24L01_CE</name></member>
      <member refid="classNRF24L01_1a2f5e84525760899949446db94d225700" prot="private" virt="non-virtual"><scope>NRF24L01</scope><name>NRF24L01_CH</name></member>
      <member refid="classNRF24L01_1a4d36b61597b9919dd4a0ecdc53526020" prot="private" virt="non-virtual"><scope>NRF24L01</scope><name>NRF24L01_CSN</name></member>
      <member refid="classNRF24L01_1a42ef1a6d858a115327d0a7310aaba57c" prot="private" virt="non-virtual"><scope>NRF24L01</scope><name>NRF24L01_DDR</name></member>
      <member refid="classNRF24L01_1a10c710f3795c47ebde120ca3d975c891" prot="private" virt="non-virtual"><scope>NRF24L01</scope><name>NRF24L01_ENABLEDP0</name></member>
      <member refid="classNRF24L01_1a8ebd82a57efbaa5928a56ba6780740de" prot="private" virt="non-virtual"><scope>NRF24L01</scope><name>NRF24L01_ENABLEDP1</name></member>
      <member refid="classNRF24L01_1aac40f597790cf3a62b382f919f1293ce" prot="private" virt="non-virtual"><scope>NRF24L01</scope><name>NRF24L01_ENABLEDP2</name></member>
      <member refid="classNRF24L01_1aea0d090c7d6da9b137ce4ce3690535e8" prot="private" virt="non-virtual"><scope>NRF24L01</scope><name>NRF24L01_ENABLEDP3</name></member>
      <member refid="classNRF24L01_1a4f19e32ed3324724d3478b9f841a2790" prot="private" virt="non-virtual"><scope>NRF24L01</scope><name>NRF24L01_ENABLEDP4</name></member>
      <member refid="classNRF24L01_1ae77cf1829f80c703e36ef57b6d23e9a9" prot="private" virt="non-virtual"><scope>NRF24L01</scope><name>NRF24L01_ENABLEDP5</name></member>
      <member refid="classNRF24L01_1a6f035e7c49d8ed5e1ab84242cef0e9be" prot="private" virt="non-virtual"><scope>NRF24L01</scope><name>NRF24L01_PAYLOAD</name></member>
      <member refid="classNRF24L01_1af6a260dd55ee5c2f7de7cfac4e91178d" prot="private" virt="non-virtual"><scope>NRF24L01</scope><name>NRF24L01_RF24_CRC</name></member>
      <member refid="classNRF24L01_1ac798ba6ce52fd4a13eb40ff274818157" prot="private" virt="non-virtual"><scope>NRF24L01</scope><name>NRF24L01_RF24_PA</name></member>
      <member refid="classNRF24L01_1a2dc0073a56f6aca86da205dd720fd132" prot="private" virt="non-virtual"><scope>NRF24L01</scope><name>NRF24L01_RF24_SPEED</name></member>
      <member refid="classNRF24L01_1a9b458f77f6ae6c42f330710e703dd847" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>openReadingPipe</name></member>
      <member refid="classNRF24L01_1a02c91592a6c762c1a4e86252f8958bd6" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>openReadingPipe</name></member>
      <member refid="classNRF24L01_1ad64a887cae746be5ca43cf08445feed9" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>openWritingPipe</name></member>
      <member refid="classNRF24L01_1a0fe37f8ff95b7c562ad1fc277890e29a" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>openWritingPipe</name></member>
      <member refid="classNRF24L01_1a082a99d802a3f2335da94e67cf8440ea" prot="private" virt="non-virtual"><scope>NRF24L01</scope><name>p_variant</name></member>
      <member refid="classNRF24L01_1af836ff0a915587aa40b5eabe4101ea4c" prot="private" virt="non-virtual"><scope>NRF24L01</scope><name>pipe0_reading_address</name></member>
      <member refid="classNRF24L01_1abaf0ed9cb5b24890631d7b8bc0e3cd82" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>powerDown</name></member>
      <member refid="classNRF24L01_1a8e184a0a6ca30fbae69c1331a567deda" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>powerUp</name></member>
      <member refid="classNRF24L01_1ae5c878a568b54ba045a99b9de377b13b" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>printDetails</name></member>
      <member refid="classNRF24L01_1a60ed6c6e072a1f41ca560546745ec6da" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>read</name></member>
      <member refid="classNRF24L01_1ad733911b261f73964817dad526745716" prot="private" virt="non-virtual"><scope>NRF24L01</scope><name>ReadPayload</name></member>
      <member refid="classNRF24L01_1a6fc7da02296e9f91908e89438ba67901" prot="private" virt="non-virtual"><scope>NRF24L01</scope><name>ReadRegister</name></member>
      <member refid="classNRF24L01_1a9766146f8b6bcab59e91e7545484c401" prot="private" virt="non-virtual"><scope>NRF24L01</scope><name>ReadRegisters</name></member>
      <member refid="classNRF24L01_1ad0797d9c6f8ecd9619c9e48168571a01" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>reUseTX</name></member>
      <member refid="classNRF24L01_1aebd4d389685333013b4bd12662c0b411" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>rxFifoFull</name></member>
      <member refid="classNRF24L01_1a17752733515f67aa9f6ed3daa1ed3d1d" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>setAddressWidth</name></member>
      <member refid="classNRF24L01_1a33b1c7dd1cad95dae57ef87bf3dce5c8" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>setAutoAck</name></member>
      <member refid="classNRF24L01_1a79cab6f958c8d9e18273d7c4750480fd" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>setAutoAck</name></member>
      <member refid="classNRF24L01_1aa8eaf9d5ed604f60a00cd79fed9edad7" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>setChannel</name></member>
      <member refid="classNRF24L01_1a6081dd6dd9cdffbc1c7534ee1824201d" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>setCRCLength</name></member>
      <member refid="classNRF24L01_1a9db0803c6d87e6ada7febea2240a7b1c" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>setDataRate</name></member>
      <member refid="classNRF24L01_1a7319961d6048e32546ad5df934bd42d8" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>setPALevel</name></member>
      <member refid="classNRF24L01_1abe5983a57d0d3bd77508e5345774c890" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>setPayloadSize</name></member>
      <member refid="classNRF24L01_1a0bb209d94b62e2a28af53179af713f3c" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>setRetries</name></member>
      <member refid="classNRF24L01_1a6321af25fee367445baa6ab4840f8443" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>spi</name></member>
      <member refid="classNRF24L01_1a4701641c1e8b3d082deb03f93c84d8c7" prot="private" virt="non-virtual"><scope>NRF24L01</scope><name>spi_speed</name></member>
      <member refid="classNRF24L01_1ab604b1e177e4812e33ebc39287503197" prot="private" virt="non-virtual"><scope>NRF24L01</scope><name>spiTrans</name></member>
      <member refid="classNRF24L01_1ab1ca9025a8740bc38ad5dd7a427e2d4f" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>startFastWrite</name></member>
      <member refid="classNRF24L01_1aaabd39829998b609c0dc317af4f141b2" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>startListening</name></member>
      <member refid="classNRF24L01_1a282e44fa8d6ec7542e9d725cf048f6b2" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>startWrite</name></member>
      <member refid="classNRF24L01_1a6ad13189b732f237ac148c659ddf6b01" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>stopListening</name></member>
      <member refid="classNRF24L01_1a5e934f8f7d37245264ad16e3c360eca7" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>testCarrier</name></member>
      <member refid="classNRF24L01_1abf1d84ed988aa6c7925ebb712b7c7f60" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>testRPD</name></member>
      <member refid="classNRF24L01_1aceeaa16f91d7c5fd6a429a6adf678bd4" prot="private" virt="non-virtual"><scope>NRF24L01</scope><name>ToggleFeatures</name></member>
      <member refid="classNRF24L01_1a1feaab910ecff17805f8141fe40028e7" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>txDelay</name></member>
      <member refid="classNRF24L01_1a4416a731de8d23cac507e8b69ec2becc" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>txStandBy</name></member>
      <member refid="classNRF24L01_1a9351f4bff2196c4f69623f636de7c6a4" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>txStandBy</name></member>
      <member refid="classNRF24L01_1ad98d10f3759d41e565397aba824d121b" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>whatHappened</name></member>
      <member refid="classNRF24L01_1a719390c69a2e45df08379f17e3289f4c" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>write</name></member>
      <member refid="classNRF24L01_1af59b3fd7aece1ae295a2e634a57d2b02" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>write</name></member>
      <member refid="classNRF24L01_1ae0f4b84a244463e8e594d238a71140c5" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>writeAckPayload</name></member>
      <member refid="classNRF24L01_1ac2c2500350c3dde0df4f09111f8f1b84" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>writeBlocking</name></member>
      <member refid="classNRF24L01_1a693f48de67c8b11ed5860dc481fcfc99" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>writeFast</name></member>
      <member refid="classNRF24L01_1a094a978ed0c7da890c90351bd945fabe" prot="public" virt="non-virtual"><scope>NRF24L01</scope><name>writeFast</name></member>
      <member refid="classNRF24L01_1a9abae657dc54d97b6eb63f33c83e9f59" prot="private" virt="non-virtual"><scope>NRF24L01</scope><name>WritePayload</name></member>
      <member refid="classNRF24L01_1abfaaa54aff7ce60c4c844dd540c47af5" prot="private" virt="non-virtual"><scope>NRF24L01</scope><name>WriteRegister</name></member>
      <member refid="classNRF24L01_1ac7d69c51eca87f16fa3a30b5e8aa85cb" prot="private" virt="non-virtual"><scope>NRF24L01</scope><name>WriteRegisters</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
