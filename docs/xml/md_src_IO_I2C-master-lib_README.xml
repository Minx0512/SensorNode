<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="md_src_IO_I2C-master-lib_README" kind="page">
    <compoundname>md_src_IO_I2C-master-lib_README</compoundname>
    <title>I2C Master library</title>
    <detaileddescription>
<para><heading level="2">Table of contents</heading>
</para><para><orderedlist>
<listitem><para>What is this library?</para></listitem><listitem><para>Contents of this library</para></listitem><listitem><para>Supported devices</para></listitem><listitem><para>Functions in this library <hruler/>
</para></listitem></orderedlist>
</para><para><heading level="3">1. What is this library?</heading>
</para><para>This library is an I2C master library which uses the TWI peripheral inside the AVR microcontroller to establish connections using the I2C protocol <hruler/>
</para><para><heading level="3">2. Contents of this library</heading>
</para><para>The library contains the following files:</para><para><itemizedlist>
<listitem><para>main.c</para></listitem><listitem><para>I2C_master.c</para></listitem><listitem><para>I2C_master.h</para></listitem></itemizedlist>
</para><para><heading level="5">main.c</heading>
</para><para>This is a piece of example code which uses this library to read out an HMC5338L I2C magnetometer.</para><para><heading level="5">I2C_master.c</heading>
</para><para>This file contains all the function declarations to setup and work with the TWI hardware peripheral inside the AVR.</para><para><emphasis>Make sure you add this source file to your Makefile!</emphasis></para><para><heading level="5">I2C_master.h</heading>
</para><para>This file contains the function prototypes and the definition of the Read / Write bit (0 = read, 1 = write)</para><para><emphasis>This file has to be included in your source file</emphasis> <hruler/>
</para><para><heading level="3">3. Supported devices</heading>
</para><para>Though I have only tested this library on an ATmega328P it should be running on all major ATmega AVRs like:</para><para><itemizedlist>
<listitem><para>ATmega644</para></listitem><listitem><para>ATmega32</para></listitem><listitem><para>ATmega16</para></listitem><listitem><para>ATmega328/P</para></listitem><listitem><para>ATmega168/P</para></listitem><listitem><para>ATmega88/P</para></listitem><listitem><para>ATmega44/P</para></listitem><listitem><para>ATmega8</para></listitem></itemizedlist>
</para><para>If your device is not supported you can probably adapt this library easily to your needs by having a look at the your device&apos;s data sheet and changing the register names appropriately</para><para>The ATtiny range of microcontrolles is not supported as they only provide a USI peripheral which is completely different from the TWI peripheral used on the other controllers <hruler/>
</para><para><heading level="3">4. Functions in this library</heading>
</para><para><itemizedlist>
<listitem><para>void i2c_init(void)</para></listitem><listitem><para>uint8_t i2c_start(uint8_t address)</para></listitem><listitem><para>uint8_t i2c_write(uint8_t data)</para></listitem><listitem><para>uint8_t i2c_read_ack(void)</para></listitem><listitem><para>uint8_t i2c_read_nack(void)</para></listitem><listitem><para>uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)</para></listitem><listitem><para>uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)</para></listitem><listitem><para>void i2c_stop(void)</para></listitem></itemizedlist>
</para><para><heading level="5">void I2C_init(void)</heading>
</para><para>This function needs to be called only once to set up the correct SCL frequency for the bus</para><para><heading level="5">uint8_t I2C_start(uint8_t address)</heading>
</para><para>This function needs to be called any time a connection to a new slave device should be established. The function returns 1 if an error has occurred, otherwise it returns 0.</para><para>The syntax to start a operation write to a device is either: <computeroutput>I2C_start(SLAVE_ADDRESS+I2C_WRITE);</computeroutput> or <computeroutput>I2C_start(SLAVE_WRITE_ADDRESS);</computeroutput></para><para>The syntax to start a read operation from a device is either: <computeroutput>I2C_start(SLAVE_ADDRESS+I2C_READ);</computeroutput> or <computeroutput>I2C_start(SLAVE_READ_ADDRESS);</computeroutput></para><para><heading level="5">uint8_t I2C_write(uint8_t data)</heading>
</para><para>This function is used to write data to the currently active device. The only parameter this function takes is the 8 bit unsigned integer to be sent. The function returns 1 if an error has occurred, otherwise it returns 0.</para><para><heading level="5">uint8_t I2C_read_ack(void)</heading>
</para><para>This function is used to read one byte from a device and request another byte of data after the transmission is complete by sending the acknowledge bit. This function returns the received byte.</para><para><heading level="5">uint8_t I2C_read_nack(void)</heading>
</para><para>This function is used to read one byte from a device an then not requesting another byte and therefore stopping the current transmission. This function returns the received byte.</para><para><heading level="5">uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length);</heading>
</para><para>This function is used to transmit [length] number of bytes to an I2C device with the given I2C address from [data]. The [address] passed to this function is the 7-bit slave address, left shifted by one bit (i.e. 7-bit slave address is <computeroutput>0x2F</computeroutput> -&gt; <computeroutput>(0x2F)&lt;&lt;1</computeroutput> = <computeroutput>0x5E</computeroutput>)</para><para><heading level="5">uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length);</heading>
</para><para>This function is used to read [length] number of bytes from the I2C device with the given I2C address into the [data]. The [address] passed to this function is the 7-bit slave address, left shifted by one bit (i.e. 7-bit slave address is <computeroutput>0x2F</computeroutput> -&gt; <computeroutput>(0x2F)&lt;&lt;1</computeroutput> = <computeroutput>0x5E</computeroutput>)</para><para><heading level="5">void I2C_stop(void)</heading>
</para><para>This function disables the TWI peripheral completely and therefore disconnects the device from the bus. </para>    </detaileddescription>
  </compounddef>
</doxygen>
