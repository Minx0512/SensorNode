.TH "md_src_IO_I2C-master-lib_README" 3 "Mon Mar 27 2017" "Version 0.1" "SensorNode" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_src_IO_I2C-master-lib_README \- I2C Master library 

.SS "Table of contents"
.PP
.IP "1." 4
What is this library?
.IP "2." 4
Contents of this library
.IP "3." 4
Supported devices
.IP "4." 4
Functions in this library 
.PP

.PP
.PP
.SS "1\&. What is this library?"
.PP
This library is an I2C master library which uses the TWI peripheral inside the AVR microcontroller to establish connections using the I2C protocol 
.PP
.PP
.SS "2\&. Contents of this library"
.PP
The library contains the following files:
.PP
.IP "\(bu" 2
main\&.c
.IP "\(bu" 2
I2C_master\&.c
.IP "\(bu" 2
I2C_master\&.h
.PP
.PP
.SS "main\&.c"
.PP
This is a piece of example code which uses this library to read out an HMC5338L I2C magnetometer\&.
.PP
.SS "I2C_master\&.c"
.PP
This file contains all the function declarations to setup and work with the TWI hardware peripheral inside the AVR\&.
.PP
\fIMake sure you add this source file to your Makefile!\fP
.PP
.SS "I2C_master\&.h"
.PP
This file contains the function prototypes and the definition of the Read / Write bit (0 = read, 1 = write)
.PP
\fIThis file has to be included in your source file\fP 
.PP
.PP
.SS "3\&. Supported devices"
.PP
Though I have only tested this library on an ATmega328P it should be running on all major ATmega AVRs like:
.PP
.IP "\(bu" 2
ATmega644
.IP "\(bu" 2
ATmega32
.IP "\(bu" 2
ATmega16
.IP "\(bu" 2
ATmega328/P
.IP "\(bu" 2
ATmega168/P
.IP "\(bu" 2
ATmega88/P
.IP "\(bu" 2
ATmega44/P
.IP "\(bu" 2
ATmega8
.PP
.PP
If your device is not supported you can probably adapt this library easily to your needs by having a look at the your device's data sheet and changing the register names appropriately
.PP
The ATtiny range of microcontrolles is not supported as they only provide a USI peripheral which is completely different from the TWI peripheral used on the other controllers 
.PP
.PP
.SS "4\&. Functions in this library"
.PP
.IP "\(bu" 2
void i2c_init(void)
.IP "\(bu" 2
uint8_t i2c_start(uint8_t address)
.IP "\(bu" 2
uint8_t i2c_write(uint8_t data)
.IP "\(bu" 2
uint8_t i2c_read_ack(void)
.IP "\(bu" 2
uint8_t i2c_read_nack(void)
.IP "\(bu" 2
uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
.IP "\(bu" 2
uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
.IP "\(bu" 2
void i2c_stop(void)
.PP
.PP
.SS "void I2C_init(void)"
.PP
This function needs to be called only once to set up the correct SCL frequency for the bus
.PP
.SS "uint8_t I2C_start(uint8_t address)"
.PP
This function needs to be called any time a connection to a new slave device should be established\&. The function returns 1 if an error has occurred, otherwise it returns 0\&.
.PP
The syntax to start a operation write to a device is either: \fCI2C_start(SLAVE_ADDRESS+I2C_WRITE);\fP or \fCI2C_start(SLAVE_WRITE_ADDRESS);\fP
.PP
The syntax to start a read operation from a device is either: \fCI2C_start(SLAVE_ADDRESS+I2C_READ);\fP or \fCI2C_start(SLAVE_READ_ADDRESS);\fP
.PP
.SS "uint8_t I2C_write(uint8_t data)"
.PP
This function is used to write data to the currently active device\&. The only parameter this function takes is the 8 bit unsigned integer to be sent\&. The function returns 1 if an error has occurred, otherwise it returns 0\&.
.PP
.SS "uint8_t I2C_read_ack(void)"
.PP
This function is used to read one byte from a device and request another byte of data after the transmission is complete by sending the acknowledge bit\&. This function returns the received byte\&.
.PP
.SS "uint8_t I2C_read_nack(void)"
.PP
This function is used to read one byte from a device an then not requesting another byte and therefore stopping the current transmission\&. This function returns the received byte\&.
.PP
.SS "uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length);"
.PP
This function is used to transmit [length] number of bytes to an I2C device with the given I2C address from [data]\&. The [address] passed to this function is the 7-bit slave address, left shifted by one bit (i\&.e\&. 7-bit slave address is \fC0x2F\fP -> \fC(0x2F)<<1\fP = \fC0x5E\fP)
.PP
.SS "uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length);"
.PP
This function is used to read [length] number of bytes from the I2C device with the given I2C address into the [data]\&. The [address] passed to this function is the 7-bit slave address, left shifted by one bit (i\&.e\&. 7-bit slave address is \fC0x2F\fP -> \fC(0x2F)<<1\fP = \fC0x5E\fP)
.PP
.SS "void I2C_stop(void)"
.PP
This function disables the TWI peripheral completely and therefore disconnects the device from the bus\&. 
