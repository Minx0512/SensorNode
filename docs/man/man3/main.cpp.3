.TH "src/main.cpp" 3 "Tue Apr 4 2017" "Version 0.2" "SensorNode" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/main.cpp \- 
.SH SYNOPSIS
.br
.PP
\fC#include <avr/io\&.h>\fP
.br
\fC#include <util/delay\&.h>\fP
.br
\fC#include <avr/interrupt\&.h>\fP
.br
\fC#include <inttypes\&.h>\fP
.br
\fC#include <stdio\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include <avr/eeprom\&.h>\fP
.br
\fC#include <avr/pgmspace\&.h>\fP
.br
\fC#include 'IO/USART\&.h'\fP
.br
\fC#include 'IO/ParseStrings\&.h'\fP
.br
\fC#include 'Wireless/NRF24L01\&.h'\fP
.br
\fC#include 'Sensors/DS18B20\&.h'\fP
.br
\fC#include 'Sensors/Photoresistor\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBCE\fP   PB1"
.br
.ti -1c
.RI "#define \fBCSN\fP   PB0"
.br
.RI "\fIChip Select Not (CSN) for the nRF24L01+ Module\&. \fP"
.ti -1c
.RI "#define \fBSensor_DS18B20\fP   1"
.br
.RI "\fIis a \fBDS18B20\fP temperature Sensor connected to the microcontroller? \fP"
.ti -1c
.RI "#define \fBSensor_DHT22\fP   0"
.br
.RI "\fIis a \fBDHT22\fP temperature and humidity sensor connected? \fP"
.ti -1c
.RI "#define \fBSensor_Move\fP   1"
.br
.RI "\fIis a movement detector connected? \fP"
.ti -1c
.RI "#define \fBSensor_LightVoltage\fP   1"
.br
.RI "\fIis a photoresitor connected to a analog input? \fP"
.ti -1c
.RI "#define \fBSensor_LightLux\fP   0"
.br
.RI "\fIis a digital Lux sensor connected (I2C)? \fP"
.ti -1c
.RI "#define \fBSensor_Pressure\fP   0"
.br
.RI "\fIis a pressure sensor connected (I2C)? \fP"
.ti -1c
.RI "#define \fBNRF_MainNode\fP   1"
.br
.RI "\fIRole of the node\&. \fP"
.ti -1c
.RI "#define \fBNRF_SN\fP   0"
.br
.RI "\fIis Slave node? \fP"
.ti -1c
.RI "#define \fBNRF_SNnum\fP   0"
.br
.RI "\fInumber of slave nodes \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBdelay_ms\fP (uint16_t ms)"
.br
.RI "\fIDelays a certain amount of milliseconds\&. \fP"
.ti -1c
.RI "void \fBGetNodeMAC\fP (char *newMAC, uint8_t *nrfMAC)"
.br
.RI "\fICopies a MAC address from an uint8 array to a char array\&. \fP"
.ti -1c
.RI "void \fBCreateSensorMAC\fP (char *newMAC, uint8_t *nrfMAC, char *add)"
.br
.RI "\fICombine new MAC address from an uint8 MAC array and a char array to a char array\&. \fP"
.ti -1c
.RI "void \fBCreateSensorMAC\fP (char *newMAC, uint64_t nrfMAC, char *add)"
.br
.RI "\fICombine new MAC address from an uint64 MAC address and a char array to a char array\&. \fP"
.ti -1c
.RI "void \fBSetupNRF\fP ()"
.br
.RI "\fISetup RF Module\&. \fP"
.ti -1c
.RI "void \fBinit_interupt\fP ()"
.br
.RI "\fIInitialize interrupts\&. \fP"
.ti -1c
.RI "\fBISR\fP (INT0_vect)"
.br
.RI "\fIInterrupt routine for INT0\&. \fP"
.ti -1c
.RI "\fBISR\fP (INT1_vect)"
.br
.RI "\fIInterrupt routine for INT1\&. \fP"
.ti -1c
.RI "\fBISR\fP (USART_RX_vect)"
.br
.RI "\fIInterrupt routine for USART_RX\&. \fP"
.ti -1c
.RI "int \fBmain\fP ()"
.br
.RI "\fIMain function\&. \fP"
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "uint8_t \fBuartRX_flag\fP = 0"
.br
.RI "\fIFlag received UART message\&. \fP"
.ti -1c
.RI "uint8_t \fBflagMovement\fP = 0"
.br
.RI "\fIFlag for movement detected\&. \fP"
.ti -1c
.RI "uint8_t \fBnrfIntFlag\fP = 0"
.br
.RI "\fIFlag for incoming message from the RF module\&. \fP"
.ti -1c
.RI "char \fBbufferNRF\fP [128][5]"
.br
.RI "\fIBuffer for received messages via nRF24L01+ module\&. \fP"
.ti -1c
.RI "uint8_t EEMEM \fBfirstrun\fP"
.br
.RI "\fIFirst run after reset/ reflash? \fP"
.ti -1c
.RI "const char \fBsendSensorStr\fP [] = '/sensor/%s/|%s/|%s'"
.br
.RI "\fITemplate for sendSensor string\&. \fP"
.ti -1c
.RI "const char \fBsendSystemStr\fP [] = '/system/%s/|%s/|%s'"
.br
.RI "\fITempplate for sendSystem string\&. \fP"
.ti -1c
.RI "const char \fBgetSystemStr\fP [] = '%s|%s|%s'"
.br
.RI "\fITemplate for getSystem string\&. \fP"
.ti -1c
.RI "uint8_t EEMEM \fBpipeEnable\fP"
.br
.RI "\fIStore RF enabled pipes in EEPROM\&. \fP"
.ti -1c
.RI "uint8_t EEMEM \fBnrfChannel\fP"
.br
.RI "\fIStore RF Channel number in EEPROM\&. \fP"
.ti -1c
.RI "uint8_t EEMEM \fBnrfACK\fP"
.br
.RI "\fIStore RF auto acknoledge in EEPROM\&. \fP"
.ti -1c
.RI "uint8_t EEMEM \fBpwrLvl\fP"
.br
.RI "\fIStore RF power level in EEPROM\&. \fP"
.ti -1c
.RI "uint8_t EEMEM \fBdataRate\fP"
.br
.ti -1c
.RI "uint8_t EEMEM \fBcrcLvl\fP"
.br
.ti -1c
.RI "uint64_t EEMEM \fBmem_adressTx\fP [25]"
.br
.ti -1c
.RI "uint64_t EEMEM \fBmem_adressRx\fP [5]"
.br
.ti -1c
.RI "char \fBstr\fP [\fBRX_BUFF\fP]"
.br
.RI "\fIReceive string Buffer\&. \fP"
.ti -1c
.RI "uint64_t \fBadressRx\fP [] = {0xA0A0A0A0A0,0xA0A0A0A0A1,0xA0A0A0A0A2,0xA0A0A0A0A3,0xA0A0A0A0A4}"
.br
.ti -1c
.RI "uint64_t \fBadressTx\fP [] = {0xB0B0B0B0B0,0xB0B0B0B0C0,0xB0B0B0B0D0,0xB0B0B0B0E0,0xB0B0B0B0F0}"
.br
.ti -1c
.RI "\fBUSART\fP \fBuart\fP = \fBUSART\fP(9600)"
.br
.RI "\fICreate new \fBUSART\fP object with a baud rate of 9600\&. \fP"
.ti -1c
.RI "\fBNRF24L01\fP \fBnrf\fP = \fBNRF24L01\fP(DDRB, PORTB, \fBCE\fP, \fBCSN\fP)"
.br
.RI "\fICreate new NRF242L01 object\&. \fP"
.ti -1c
.RI "\fBParseStrings\fP \fBps\fP = \fBParseStrings\fP()"
.br
.RI "\fICreate new ParseString object\&. \fP"
.ti -1c
.RI "\fBDS18B20\fP \fBds\fP = \fBDS18B20\fP(PORTD,DDRD,PIND, PD6)"
.br
.RI "\fICreate new \fBDS18B20\fP object connected to pin PD6\&. \fP"
.ti -1c
.RI "\fBPhotoresistor\fP \fBpr\fP = \fBPhotoresistor\fP(0x00)"
.br
.RI "\fICreate new Photoresitor object connected to the analog output 0x00\&. \fP"
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define CE   PB1"
Chip Enable (CE) for the nRF24L01+ Module 
.SS "#define CSN   PB0"

.PP
Chip Select Not (CSN) for the nRF24L01+ Module\&. 
.SS "#define NRF_MainNode   1"

.PP
Role of the node\&. 
.SS "#define NRF_SN   0"

.PP
is Slave node? 
.SS "#define NRF_SNnum   0"

.PP
number of slave nodes 
.SS "#define Sensor_DHT22   0"

.PP
is a \fBDHT22\fP temperature and humidity sensor connected? 
.SS "#define Sensor_DS18B20   1"

.PP
is a \fBDS18B20\fP temperature Sensor connected to the microcontroller? 
.SS "#define Sensor_LightLux   0"

.PP
is a digital Lux sensor connected (I2C)? 
.SS "#define Sensor_LightVoltage   1"

.PP
is a photoresitor connected to a analog input? 
.SS "#define Sensor_Move   1"

.PP
is a movement detector connected? 
.SS "#define Sensor_Pressure   0"

.PP
is a pressure sensor connected (I2C)? 
.SH "Function Documentation"
.PP 
.SS "void CreateSensorMAC (char * newMAC, uint8_t * nrfMAC, char * add)"

.PP
Combine new MAC address from an uint8 MAC array and a char array to a char array\&. 
.PP
\fBParameters:\fP
.RS 4
\fInrfMAC\fP MAC address uint8 array of the nRF24L01+ module 
.br
\fInewMAC\fP MAC address char array of the sensor 
.br
\fIadd\fP Address addition 
.RE
.PP

.SS "void CreateSensorMAC (char * newMAC, uint64_t nrfMAC, char * add)"

.PP
Combine new MAC address from an uint64 MAC address and a char array to a char array\&. 
.PP
\fBParameters:\fP
.RS 4
\fInrfMAC\fP MAC address uint64 of the nRF24L01+ module 
.br
\fInewMAC\fP MAC address char array of the sensor 
.br
\fIadd\fP Address addition 
.RE
.PP

.SS "void delay_ms (uint16_t ms)"

.PP
Delays a certain amount of milliseconds\&. 
.PP
\fBParameters:\fP
.RS 4
\fIms\fP Number of milliseconds to delay as unsigned integer 16 argument\&. 
.RE
.PP

.SS "void GetNodeMAC (char * newMAC, uint8_t * nrfMAC)"

.PP
Copies a MAC address from an uint8 array to a char array\&. 
.PP
\fBParameters:\fP
.RS 4
\fInrfMAC\fP MAC address uint8 array of the nRF24L01+ module 
.br
\fInewMAC\fP MAC address char array of the nRF24L01+ module 
.RE
.PP

.SS "void init_interupt ()"

.PP
Initialize interrupts\&. Trigger INT1 on rising edge and INT0 on falling edge 
.SS "ISR (INT0_vect)"

.PP
Interrupt routine for INT0\&. RF module sends an interrupt if there is data in its buffer to read 
.SS "ISR (INT1_vect)"

.PP
Interrupt routine for INT1\&. Sets the flagMovement to 0 if the movment detector fires 
.SS "ISR (USART_RX_vect)"

.PP
Interrupt routine for USART_RX\&. Reads the incoming message from the UART buffer 
.SS "int main ()"

.PP
Main function\&. 
.PP
\fBReturns:\fP
.RS 4
an integer 0 upon exit success 
.RE
.PP

.PP
\fBTodo\fP
.RS 4
System info 
.RE
.PP

.SS "void SetupNRF ()"

.PP
Setup RF Module\&. 
.SH "Variable Documentation"
.PP 
.SS "uint64_t adressRx[] = {0xA0A0A0A0A0,0xA0A0A0A0A1,0xA0A0A0A0A2,0xA0A0A0A0A3,0xA0A0A0A0A4}"
standard Rx address to receive data on 
.SS "uint64_t adressTx[] = {0xB0B0B0B0B0,0xB0B0B0B0C0,0xB0B0B0B0D0,0xB0B0B0B0E0,0xB0B0B0B0F0}"
Tx address to send data to 
.SS "char bufferNRF[128][5]"

.PP
Buffer for received messages via nRF24L01+ module\&. 
.SS "uint8_t EEMEM crcLvl"
Store CRC level in EEPROM 
.SS "uint8_t EEMEM dataRate"
Store RF data rate in EEPROM 
.SS "\fBDS18B20\fP ds = \fBDS18B20\fP(PORTD,DDRD,PIND, PD6)"

.PP
Create new \fBDS18B20\fP object connected to pin PD6\&. 
.SS "uint8_t EEMEM firstrun"

.PP
First run after reset/ reflash? 
.SS "uint8_t flagMovement = 0"

.PP
Flag for movement detected\&. 
.SS "const char getSystemStr[] = '%s|%s|%s'"

.PP
Template for getSystem string\&. 
.SS "uint64_t EEMEM mem_adressRx[5]"
Array for receive addresses 
.SS "uint64_t EEMEM mem_adressTx[25]"
Array for transmit addresses 
.SS "\fBNRF24L01\fP nrf = \fBNRF24L01\fP(DDRB, PORTB, \fBCE\fP, \fBCSN\fP)"

.PP
Create new NRF242L01 object\&. 
.SS "uint8_t EEMEM nrfACK"

.PP
Store RF auto acknoledge in EEPROM\&. 
.SS "uint8_t EEMEM nrfChannel"

.PP
Store RF Channel number in EEPROM\&. 
.SS "uint8_t nrfIntFlag = 0"

.PP
Flag for incoming message from the RF module\&. 
.SS "uint8_t EEMEM pipeEnable"

.PP
Store RF enabled pipes in EEPROM\&. 
.SS "\fBPhotoresistor\fP pr = \fBPhotoresistor\fP(0x00)"

.PP
Create new Photoresitor object connected to the analog output 0x00\&. 
.SS "\fBParseStrings\fP ps = \fBParseStrings\fP()"

.PP
Create new ParseString object\&. 
.SS "uint8_t EEMEM pwrLvl"

.PP
Store RF power level in EEPROM\&. 
.SS "const char sendSensorStr[] = '/sensor/%s/|%s/|%s'"

.PP
Template for sendSensor string\&. 
.SS "const char sendSystemStr[] = '/system/%s/|%s/|%s'"

.PP
Tempplate for sendSystem string\&. 
.SS "char str[\fBRX_BUFF\fP]"

.PP
Receive string Buffer\&. 
.SS "\fBUSART\fP uart = \fBUSART\fP(9600)"

.PP
Create new \fBUSART\fP object with a baud rate of 9600\&. 
.SS "uint8_t uartRX_flag = 0"

.PP
Flag received UART message\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for SensorNode from the source code\&.
